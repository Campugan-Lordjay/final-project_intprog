{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\n// array in local storage for accounts\nconst accountsKey = 'request-management-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n// array in local storage for employees\nconst employeesKey = 'request-management-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n// array in local storage for departments\nconst departmentsKey = 'request-management-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [{\n  id: 1,\n  name: 'HR',\n  description: 'Human Resources'\n}, {\n  id: 2,\n  name: 'IT',\n  description: 'Information Technology'\n}, {\n  id: 3,\n  name: 'Finance',\n  description: 'Finance Department'\n}, {\n  id: 4,\n  name: 'Marketing',\n  description: 'Marketing Department'\n}];\n// array in local storage for requests and their items\nconst requestsKey = 'request-management-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n// array in local storage for request items\nconst requestItemsKey = 'request-management-items';\nlet requestItems = JSON.parse(localStorage.getItem(requestItemsKey)) || [];\n// array in local storage for workflows\nconst workflowsKey = 'request-management-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n// array in local storage for employee positions\nconst positionsKey = 'request-management-positions';\nlet positions = JSON.parse(localStorage.getItem(positionsKey)) || [{\n  id: 1,\n  name: 'Manager',\n  description: 'Department Manager'\n}, {\n  id: 2,\n  name: 'Team Lead',\n  description: 'Team Leader'\n}, {\n  id: 3,\n  name: 'Senior Staff',\n  description: 'Senior Level Staff'\n}, {\n  id: 4,\n  name: 'Junior Staff',\n  description: 'Junior Level Staff'\n}];\n// array in local storage for request types\nconst requestTypesKey = 'request-management-request-types';\nlet requestTypes = JSON.parse(localStorage.getItem(requestTypesKey)) || [{\n  id: 1,\n  name: 'Leave Request',\n  description: 'Request for leave or time off'\n}, {\n  id: 2,\n  name: 'Equipment Request',\n  description: 'Request for office equipment'\n}, {\n  id: 3,\n  name: 'Training Request',\n  description: 'Request for training or workshops'\n}, {\n  id: 4,\n  name: 'Other',\n  description: 'Other types of requests'\n}];\n// Helper functions for generating IDs\nfunction newAccountId() {\n  return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n}\nfunction newRequestId() {\n  return requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\n}\nfunction newRequestItemId() {\n  return requestItems.length ? Math.max(...requestItems.map(x => x.id)) + 1 : 1;\n}\nfunction newEmployeeId() {\n  return employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1;\n}\nfunction newWorkflowId() {\n  return workflows.length ? Math.max(...workflows.map(x => x.id)) + 1 : 1;\n}\nfunction newDepartmentId() {\n  return departments.length ? Math.max(...departments.map(x => x.id)) + 1 : 1;\n}\nfunction newPositionId() {\n  return positions.length ? Math.max(...positions.map(x => x.id)) + 1 : 1;\n}\nfunction newRequestTypeId() {\n  return requestTypes.length ? Math.max(...requestTypes.map(x => x.id)) + 1 : 1;\n}\n// Helper functions for JWT and refresh tokens\nfunction generateJwtToken(account) {\n  try {\n    const header = btoa(JSON.stringify({\n      alg: 'HS256',\n      typ: 'JWT'\n    }));\n    const now = new Date().getTime();\n    const payload = {\n      id: account.id,\n      role: account.role,\n      email: account.email,\n      iat: now,\n      exp: now + 60 * 60 * 1000 // 1 hour expiry\n    };\n\n    const payloadBase64 = btoa(JSON.stringify(payload));\n    const signature = btoa('fake-jwt-secret-key');\n    return `${header}.${payloadBase64}.${signature}`;\n  } catch (error) {\n    console.error('Error generating JWT token:', error);\n    throw error;\n  }\n}\nfunction generateRefreshToken() {\n  try {\n    const header = btoa(JSON.stringify({\n      alg: 'HS256',\n      typ: 'JWT'\n    }));\n    const now = new Date().getTime();\n    const payload = {\n      id: Math.random().toString(36).substr(2),\n      iat: now,\n      exp: now + 7 * 24 * 60 * 60 * 1000 // 7 days expiry\n    };\n\n    const payloadBase64 = btoa(JSON.stringify(payload));\n    const signature = btoa('fake-refresh-secret-key');\n    return `${header}.${payloadBase64}.${signature}`;\n  } catch (error) {\n    console.error('Error generating refresh token:', error);\n    throw error;\n  }\n}\nfunction isTokenExpired(token) {\n  if (!token) return true;\n  try {\n    const parts = token.split('.');\n    if (parts.length !== 3) return true;\n    const payload = JSON.parse(atob(parts[1]));\n    if (!payload || typeof payload.exp !== 'number') return true;\n    // Add a 5-minute buffer to prevent edge cases\n    return payload.exp - 5 * 60 * 1000 < new Date().getTime();\n  } catch (error) {\n    console.error('Error checking token expiration:', error);\n    return true;\n  }\n}\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    constructor(alertService) {\n      this.alertService = alertService;\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      const alertService = this.alertService;\n      // Helper functions\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        }));\n      }\n      function error(message) {\n        return throwError(() => ({\n          error: {\n            message\n          }\n        }));\n      }\n      function unauthorized() {\n        return throwError(() => ({\n          status: 401,\n          error: {\n            message: 'Unauthorized'\n          }\n        }));\n      }\n      function notFound() {\n        return throwError(() => ({\n          status: 404,\n          error: {\n            message: 'Not Found'\n          }\n        }));\n      }\n      function basicDetails(account) {\n        const {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          status,\n          isVerified\n        } = account;\n        return {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          status,\n          isVerified\n        };\n      }\n      function isAuthenticated() {\n        try {\n          const authHeader = headers.get('Authorization');\n          if (!(authHeader === null || authHeader === void 0 ? void 0 : authHeader.startsWith('Bearer '))) return false;\n          const token = authHeader.split(' ')[1];\n          if (isTokenExpired(token)) {\n            console.log('JWT token has expired');\n            return false;\n          }\n          const parts = token.split('.');\n          const payload = JSON.parse(atob(parts[1]));\n          const account = accounts.find(x => x.id === payload.id);\n          return !!account;\n        } catch (error) {\n          console.error('Authentication check error:', error);\n          return false;\n        }\n      }\n      function isAdmin() {\n        var _a;\n        return ((_a = currentAccount()) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n      }\n      function currentAccount() {\n        if (!isAuthenticated()) return null;\n        try {\n          const token = headers.get('Authorization').split(' ')[1];\n          const parts = token.split('.');\n          const payload = JSON.parse(atob(parts[1]));\n          return accounts.find(x => x.id === payload.id);\n        } catch (_a) {\n          return null;\n        }\n      }\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n      function getRefreshToken(headers) {\n        try {\n          const authHeader = headers.get('Authorization');\n          if (!(authHeader === null || authHeader === void 0 ? void 0 : authHeader.startsWith('Bearer '))) return null;\n          return authHeader.split(' ')[1];\n        } catch (_a) {\n          return null;\n        }\n      }\n      function getWorkflowsByEmployeeId() {\n        if (!isAuthenticated()) return unauthorized();\n        const internalId = parseInt(url.split('/').pop());\n        console.log('Looking for requests with employeeId:', internalId);\n        const employee = employees.find(e => e.id === internalId);\n        if (!employee) {\n          console.log('Employee not found with internal id:', internalId);\n          return notFound();\n        }\n        const employeeRequests = requests.filter(x => x.employeeId === employee.id);\n        console.log('Found requests:', employeeRequests.length);\n        // Sort requests in descending order by creation date\n        const sortedRequests = [...employeeRequests].sort((a, b) => {\n          const dateA = new Date(a.createdDate);\n          const dateB = new Date(b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          const account = accounts.find(a => a.id === employee.accountId);\n          // Format employee name with proper capitalization\n          const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n          const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n          const fullName = `${firstName} ${lastName}`.trim();\n          return {\n            id: request.id,\n            type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type,\n            status: request.status,\n            createdDate: request.createdDate,\n            items: items,\n            employee: {\n              id: employee.id,\n              employeeId: employee.employeeId,\n              fullName: fullName\n            }\n          };\n        }));\n      }\n      return handleRoute().pipe(delay(500), materialize(), dematerialize());\n      function handleRoute() {\n        switch (true) {\n          case url.endsWith('/accounts/authenticate') && method === 'POST':\n            return authenticate();\n          case url.endsWith('/accounts/refresh-token') && method === 'POST':\n            return refreshToken();\n          case url.endsWith('/accounts/revoke-token') && method === 'POST':\n            return revokeToken();\n          case url.endsWith('/accounts/register') && method === 'POST':\n            return register();\n          case url.endsWith('/accounts/verify-email') && method === 'POST':\n            return verifyEmail();\n          case url.endsWith('/accounts') && method === 'GET':\n            return getAccounts();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n            return getAccountById();\n          case url.endsWith('/accounts') && method === 'POST':\n            return createAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n            return updateAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n            return deleteAccount();\n          // request routes\n          case url.endsWith('/requests') && method === 'GET':\n            return getRequests();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n            return getRequestById();\n          case url.match(/\\/requests\\/employee\\/\\d+$/) && method === 'GET':\n            return getRequestsByEmployeeId();\n          case url.endsWith('/requests/my-requests') && method === 'GET':\n            return getMyRequests();\n          case url.endsWith('/requests') && method === 'POST':\n            return createRequest();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n            return updateRequest();\n          case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n            return changeRequestStatus();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n            return deleteRequest();\n          // employee routes\n          case url.endsWith('/employees') && method === 'GET':\n            return getEmployees();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n            return getEmployeeById();\n          case url.endsWith('/employees') && method === 'POST':\n            return createEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n            return updateEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n            return deleteEmployee();\n          case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'PUT':\n            return transferEmployee();\n          // department routes\n          case url.endsWith('/departments') && method === 'GET':\n            return getDepartments();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n            return getDepartmentById();\n          case url.endsWith('/departments') && method === 'POST':\n            return createDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n            return updateDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n            return deleteDepartment();\n          // position routes\n          case url.endsWith('/positions') && method === 'GET':\n            return getPositions();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'GET':\n            return getPositionById();\n          case url.endsWith('/positions') && method === 'POST':\n            return createPosition();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'PUT':\n            return updatePosition();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'DELETE':\n            return deletePosition();\n          // request type routes\n          case url.endsWith('/request-types') && method === 'GET':\n            return getRequestTypes();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'GET':\n            return getRequestTypeById();\n          case url.endsWith('/request-types') && method === 'POST':\n            return createRequestType();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'PUT':\n            return updateRequestType();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'DELETE':\n            return deleteRequestType();\n          // workflow routes\n          case url.endsWith('/workflows') && method === 'GET':\n            return getWorkflows();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'GET':\n            return getWorkflowById();\n          case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByEmployeeId();\n          case url.match(/\\/workflows\\/request\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByRequestId();\n          case url.endsWith('/workflows') && method === 'POST':\n            return createWorkflow();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n            return updateWorkflow();\n          case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n            return updateWorkflowStatus();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'DELETE':\n            return deleteWorkflow();\n          case url.match(/\\/workflows\\/items\\/\\d+$/) && method === 'DELETE':\n            return deleteWorkflowItem();\n          default:\n            return next.handle(request);\n        }\n      }\n      // Authentication functions\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        if (!account) return error('Email or password is incorrect');\n        if (password !== account.password) return error('Email or password is incorrect');\n        if (!account.isVerified) return error('Please verify your email before logging in');\n        try {\n          // Generate refresh token that expires in 7 days\n          const refreshToken = generateRefreshToken();\n          account.refreshTokens = account.refreshTokens || [];\n          // Remove any expired refresh tokens\n          account.refreshTokens = account.refreshTokens.filter(rt => !isTokenExpired(rt));\n          account.refreshTokens.push(refreshToken);\n          localStorage.setItem(accountsKey, JSON.stringify(accounts));\n          const jwtToken = generateJwtToken(account);\n          return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n            jwtToken,\n            refreshToken\n          }));\n        } catch (error) {\n          console.error('Authentication error:', error);\n          return error('An error occurred during authentication');\n        }\n      }\n      function refreshToken() {\n        try {\n          const refreshToken = getRefreshToken(headers);\n          if (!refreshToken) {\n            console.log('No refresh token found');\n            return unauthorized();\n          }\n          const account = accounts.find(x => {\n            var _a;\n            return (_a = x.refreshTokens) === null || _a === void 0 ? void 0 : _a.includes(refreshToken);\n          });\n          if (!account) {\n            console.log('No account found for refresh token');\n            return unauthorized();\n          }\n          // Verify refresh token hasn't expired\n          if (isTokenExpired(refreshToken)) {\n            console.log('Refresh token has expired');\n            // Remove expired refresh token\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n            return unauthorized();\n          }\n          // Generate new tokens\n          const newRefreshToken = generateRefreshToken();\n          const jwtToken = generateJwtToken(account);\n          // Update refresh tokens\n          account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken && !isTokenExpired(x));\n          account.refreshTokens.push(newRefreshToken);\n          localStorage.setItem(accountsKey, JSON.stringify(accounts));\n          console.log('Token refresh successful');\n          return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n            jwtToken,\n            refreshToken: newRefreshToken\n          }));\n        } catch (error) {\n          console.error('Refresh token error:', error);\n          return unauthorized();\n        }\n      }\n      function revokeToken() {\n        if (!isAuthenticated()) return unauthorized();\n        const refreshToken = getRefreshToken(headers);\n        const account = accounts.find(x => {\n          var _a;\n          return (_a = x.refreshTokens) === null || _a === void 0 ? void 0 : _a.includes(refreshToken);\n        });\n        // revoke token and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function register() {\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          // display email already registered message in alert\n          setTimeout(() => {\n            alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, {\n              autoclose: false\n            });\n          }, 1000);\n          // always return ok() response to prevent email enumeration\n          return ok();\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        if (account.id === 1) {\n          // first registered account is an admin\n          account.role = Role.Admin;\n          account.status = 'Active'; // Admin accounts get active status\n        } else {\n          account.role = Role.User;\n          account.status = 'Inactive'; // User accounts get inacitve status upon creation\n        }\n\n        account.dateCreated = new Date().toISOString();\n        account.verificationToken = new Date().getTime().toString();\n        account.isVerified = false;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display verification email in alert\n        setTimeout(() => {\n          const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n          alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, {\n            autoclose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function verifyEmail() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n        if (!account) return error('Verification failed');\n        // set is verified flag to true if token is valid\n        account.isVerified = true;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function getAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.map(x => basicDetails(x)));\n      }\n      function getAccountById() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        // user accounts can get own profile and admin accounts can get all profiles\n        if (account.id !== currentAccount().id && !isAdmin()) {\n          return unauthorized();\n        }\n        return ok(basicDetails(account));\n      }\n      // Request functions\n      function getRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        // Return all requests for admins, or filtered for regular users\n        let filteredRequests = [...requests];\n        if (!isAdmin()) {\n          const currentUserId = currentAccount().id;\n          filteredRequests = requests.filter(x => x.employeeId === currentUserId);\n        }\n        return ok(filteredRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const requestEmployee = employees.find(e => e.id === request.employeeId);\n          const requestAccount = accounts.find(a => a.id === (requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.accountId));\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return {\n            id: request.id,\n            employeeId: (requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.employeeId) || '',\n            type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type || '',\n            status: request.status,\n            createdDate: request.createdDate,\n            items: items,\n            employee: {\n              id: requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.id,\n              employeeId: requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.employeeId,\n              fullName: requestAccount ? `${requestAccount.firstName} ${requestAccount.lastName}`.trim() : ''\n            }\n          };\n        }));\n      }\n      function getRequestById() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        // Check authorization\n        if (!isAdmin() && request.employeeId !== currentAccount().id) {\n          return unauthorized();\n        }\n        // Add related data\n        const items = requestItems.filter(item => item.requestId === request.id);\n        const employee = employees.find(e => e.id === request.employeeId);\n        const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        // Format employee name with proper capitalization\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        return ok(Object.assign(Object.assign({}, request), {\n          items: items.map(item => ({\n            id: item.id,\n            name: item.name,\n            quantity: item.quantity\n          })),\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            fullName: fullName,\n            employeeId: employee.employeeId\n          }) : null,\n          type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type\n        }));\n      }\n      function getRequestsByEmployeeId() {\n        if (!isAuthenticated()) return unauthorized();\n        const internalId = parseInt(url.split('/').pop());\n        console.log('Looking for requests with employeeId:', internalId);\n        const employee = employees.find(e => e.id === internalId);\n        if (!employee) {\n          console.log('Employee not found with internal id:', internalId);\n          return notFound();\n        }\n        const employeeRequests = requests.filter(x => x.employeeId === employee.id);\n        console.log('Found requests:', employeeRequests.length);\n        // Sort requests in descending order by creation date\n        const sortedRequests = [...employeeRequests].sort((a, b) => {\n          const dateA = new Date(a.createdDate);\n          const dateB = new Date(b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          const account = accounts.find(a => a.id === employee.accountId);\n          // Format employee name with proper capitalization\n          const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n          const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n          const fullName = `${firstName} ${lastName}`.trim();\n          return {\n            id: request.id,\n            type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type,\n            status: request.status,\n            createdDate: request.createdDate,\n            items: items,\n            employee: {\n              id: employee.id,\n              employeeId: employee.employeeId,\n              fullName: fullName\n            }\n          };\n        }));\n      }\n      function getMyRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        const currentUserId = currentAccount().id;\n        const myRequests = requests.filter(x => x.employeeId === currentUserId);\n        return ok(myRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const employee = employees.find(e => e.id === request.employeeId);\n          const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return Object.assign(Object.assign({}, request), {\n            items,\n            employee: employee ? Object.assign(Object.assign({}, employee), {\n              fullName: `${(account === null || account === void 0 ? void 0 : account.firstName) || ''} ${(account === null || account === void 0 ? void 0 : account.lastName) || ''}`.trim(),\n              employeeId: employee.employeeId\n            }) : null,\n            type: requestType ? requestType.name : request.type\n          });\n        }));\n      }\n      function createRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        console.log('Received request data:', body);\n        // Find employee by employeeId\n        let targetEmployee;\n        if (body.employeeId) {\n          // Try to find by internal ID first\n          const employeeIdNum = Number(body.employeeId);\n          targetEmployee = employees.find(e => e.id === employeeIdNum);\n          if (!targetEmployee) {\n            // If not found by internal ID, try to find by employee ID string\n            targetEmployee = employees.find(e => e.employeeId === body.employeeId);\n          }\n          if (!targetEmployee) {\n            console.error('Employee not found for ID:', body.employeeId);\n            return error('Employee not found');\n          }\n        } else {\n          // If no employeeId provided, use current user\n          const currentUser = currentAccount();\n          targetEmployee = employees.find(e => e.accountId === currentUser.id);\n          if (!targetEmployee) {\n            console.error('No employee found for current user');\n            return error('Current user is not an employee');\n          }\n        }\n        console.log('Target employee found:', targetEmployee);\n        const request = {\n          id: newRequestId(),\n          employeeId: targetEmployee.id,\n          typeId: body.typeId ? Number(body.typeId) : null,\n          type: body.type,\n          description: body.description || '',\n          status: 'Pending',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        console.log('Creating request:', request);\n        // Validate required fields\n        if (!request.type && !request.typeId) {\n          return error('Request type is required');\n        }\n        // Validate and process items if present\n        let requestItemsList = [];\n        if (body.items && Array.isArray(body.items)) {\n          try {\n            requestItemsList = body.items.map(item => {\n              if (!item.name || !item.quantity) {\n                throw new Error('Invalid item data');\n              }\n              return {\n                id: newRequestItemId(),\n                requestId: request.id,\n                name: item.name,\n                quantity: Number(item.quantity)\n              };\n            });\n          } catch (error) {\n            return error('Invalid item data provided');\n          }\n        }\n        // Save request and items\n        requests.push(request);\n        if (requestItemsList.length > 0) {\n          requestItems.push(...requestItemsList);\n          localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        }\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        const account = accounts.find(a => a.id === targetEmployee.accountId);\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        const response = Object.assign(Object.assign({}, request), {\n          items: requestItemsList,\n          employee: {\n            id: targetEmployee.id,\n            employeeId: targetEmployee.employeeId,\n            fullName: fullName\n          }\n        });\n        console.log('Created request:', response);\n        return ok(response);\n      }\n      function updateRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        console.log('Received update data:', body);\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Update basic request fields\n        Object.assign(request, {\n          type: body.type,\n          description: body.description || request.description,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Handle item changes\n        if (body.items) {\n          // Remove all existing items for this request\n          requestItems = requestItems.filter(item => item.requestId !== requestId);\n          // Add new/updated items\n          const newItems = body.items.map(item => ({\n            id: item.id || newRequestItemId(),\n            requestId: requestId,\n            name: item.name,\n            quantity: Number(item.quantity)\n          }));\n          requestItems.push(...newItems);\n          localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        }\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        // Get related data for response\n        const employee = employees.find(e => e.id === request.employeeId);\n        const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItems.filter(item => item.requestId === requestId),\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            fullName: fullName,\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function changeRequestStatus() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        const newStatus = body.status;\n        if (!newStatus) return error('Status is required');\n        // Update request\n        request.status = newStatus;\n        request.lastModifiedDate = new Date().toISOString();\n        // Update requests array\n        const requestIndex = requests.findIndex(x => x.id === requestId);\n        requests[requestIndex] = request;\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        // Get related data for response\n        const employee = employees.find(e => e.id === request.employeeId);\n        const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        const items = requestItems.filter(item => item.requestId === request.id);\n        // Format employee name\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        return ok(Object.assign(Object.assign({}, request), {\n          type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type,\n          items: items,\n          employee: employee ? {\n            id: employee.id,\n            employeeId: employee.employeeId,\n            fullName: fullName\n          } : null\n        }));\n      }\n      function deleteRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Delete request and its items\n        requests = requests.filter(x => x.id !== requestId);\n        requestItems = requestItems.filter(x => x.requestId !== requestId);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        return ok();\n      }\n      // Employee functions\n      function getEmployees() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(employees.map(employee => {\n          const department = departments.find(d => d.id === employee.departmentId);\n          const account = accounts.find(a => a.id === employee.accountId);\n          // Format names with proper capitalization\n          const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n          const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n          return Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId,\n            fullName: `${firstName} ${lastName}`.trim(),\n            departmentName: (department === null || department === void 0 ? void 0 : department.name) || '',\n            department: department ? {\n              id: department.id,\n              name: department.name,\n              description: department.description\n            } : null,\n            account: account ? basicDetails(account) : null\n          });\n        }));\n      }\n      function getEmployeeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employee = employees.find(x => x.id === employeeId);\n        if (!employee) return notFound();\n        // Get fresh department data\n        const department = departments.find(d => d.id === employee.departmentId);\n        if (!department) return error('Department not found');\n        const account = accounts.find(a => a.id === employee.accountId);\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        // Return complete employee data with fresh relations\n        return ok(Object.assign(Object.assign({}, employee), {\n          employeeId: employee.employeeId,\n          fullName: `${firstName} ${lastName}`.trim(),\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function createEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        // Log the received data for debugging\n        console.log('Received employee data:', body);\n        // Check if employee ID already exists\n        if (employees.find(x => x.employeeId === body.employeeId)) {\n          return error('Employee ID already exists');\n        }\n        // Validate department exists\n        const department = departments.find(d => d.id === Number(body.departmentId));\n        if (!department) return error('Department not found');\n        // Validate account exists and isn't already assigned to an employee\n        const account = accounts.find(a => a.id === Number(body.accountId));\n        if (!account) return error('Account not found');\n        if (employees.find(e => e.accountId === Number(body.accountId))) {\n          return error('Account is already assigned to another employee');\n        }\n        const employee = {\n          id: newEmployeeId(),\n          accountId: Number(body.accountId),\n          employeeId: body.employeeId,\n          departmentId: Number(body.departmentId),\n          position: body.position,\n          hireDate: body.hireDate,\n          salary: Number(body.salary),\n          status: body.status || 'Active',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        // Check each required field individually and log the result\n        const requiredFields = {\n          accountId: !!employee.accountId,\n          employeeId: !!employee.employeeId,\n          departmentId: !!employee.departmentId,\n          position: !!employee.position,\n          hireDate: !!employee.hireDate,\n          salary: !!employee.salary\n        };\n        console.log('Field validation results:', requiredFields);\n        // Check if any required field is missing\n        const missingFields = Object.entries(requiredFields).filter(([_, isValid]) => !isValid).map(([fieldName]) => fieldName);\n        if (missingFields.length > 0) {\n          return error(`Required fields are missing: ${missingFields.join(', ')}`);\n        }\n        // Format names\n        const firstName = account.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = account.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        // Create workflow entry for new employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employee.id,\n          type: 'Added',\n          details: {\n            task: `New employee ${employee.employeeId} was added`,\n            additionalInfo: `Added to ${department.name} department as ${employee.position}`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees.push(employee);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, employee), {\n          fullName: `${firstName} ${lastName}`.trim(),\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          }\n        }));\n      }\n      function updateEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const oldEmployee = employees[employeeIndex];\n        const updatedEmployee = Object.assign(Object.assign(Object.assign({}, oldEmployee), body), {\n          id: employeeId,\n          accountId: body.accountId ? Number(body.accountId) : oldEmployee.accountId,\n          departmentId: body.departmentId ? Number(body.departmentId) : oldEmployee.departmentId,\n          position: body.position || oldEmployee.position,\n          salary: body.salary ? Number(body.salary) : oldEmployee.salary,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate department exists if changed\n        if (body.departmentId) {\n          const department = departments.find(d => d.id === updatedEmployee.departmentId);\n          if (!department) return error('Department not found');\n        }\n        // Validate account exists if changed\n        if (body.accountId) {\n          const account = accounts.find(a => a.id === updatedEmployee.accountId);\n          if (!account) return error('Account not found');\n        }\n        const department = departments.find(d => d.id === updatedEmployee.departmentId);\n        const account = accounts.find(a => a.id === updatedEmployee.accountId);\n        // Create workflow entry for updated employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Updated',\n          details: {\n            task: `Employee ${employeeId} was updated`,\n            additionalInfo: `Updated in ${department.name} department`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees.push(updatedEmployee);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, updatedEmployee), {\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function deleteEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const employee = employees[employeeIndex];\n        // Delete employee\n        employees = employees.filter(x => x.id !== employeeId);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok(Object.assign(Object.assign({}, employee), {\n          status: 'Deleted'\n        }));\n      }\n      function transferEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        // Find the employee index\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) {\n          console.error('Employee not found:', employeeId);\n          return notFound();\n        }\n        // Get the current employee\n        const employee = employees[employeeIndex];\n        const oldDepartmentId = employee.departmentId;\n        const newDepartmentId = Number(body.departmentId);\n        // Validate departments exist\n        const oldDepartment = departments.find(d => d.id === oldDepartmentId);\n        const newDepartment = departments.find(d => d.id === newDepartmentId);\n        if (!oldDepartment || !newDepartment) {\n          console.error('Department not found. Old:', oldDepartmentId, 'New:', newDepartmentId);\n          return error('Department not found');\n        }\n        // Don't do anything if the department hasn't changed\n        if (oldDepartmentId === newDepartmentId) {\n          console.log('Employee already in department:', newDepartmentId);\n          return error('Employee is already in this department');\n        }\n        console.log('Transferring employee', employee.employeeId, 'from', oldDepartment.name, 'to', newDepartment.name);\n        // Update the employee's department\n        employees[employeeIndex] = Object.assign(Object.assign({}, employee), {\n          departmentId: newDepartmentId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Get employee account for name\n        const account = accounts.find(a => a.id === employee.accountId);\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        // Create workflow entry for transfer\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Transferred',\n          details: {\n            task: `Employee ${employee.employeeId} was transferred`,\n            additionalInfo: `From ${oldDepartment.name} to ${newDepartment.name} department`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        workflows.push(workflow);\n        // Save changes\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        console.log('Transfer completed successfully');\n        return ok(Object.assign(Object.assign({}, employees[employeeIndex]), {\n          fullName: `${firstName} ${lastName}`.trim(),\n          departmentName: newDepartment.name,\n          department: {\n            id: newDepartment.id,\n            name: newDepartment.name,\n            description: newDepartment.description\n          }\n        }));\n      }\n      // Department functions\n      function getDepartments() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(departments.map(department => {\n          return Object.assign(Object.assign({}, department), {\n            id: department.id.toString(),\n            name: department.name,\n            description: department.description\n          });\n        }));\n      }\n      function getDepartmentById() {\n        if (!isAuthenticated()) return unauthorized();\n        const departmentId = idFromUrl();\n        const department = departments.find(x => x.id === departmentId);\n        if (!department) return notFound();\n        return ok(Object.assign(Object.assign({}, department), {\n          id: department.id.toString(),\n          name: department.name,\n          description: department.description\n        }));\n      }\n      function createDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const department = body;\n        // Validate department name is unique\n        if (departments.find(x => x.name === department.name)) {\n          return error('Department name already exists');\n        }\n        // Assign department id and save\n        department.id = newDepartmentId();\n        departments.push(department);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, department), {\n          id: department.id.toString()\n        }));\n      }\n      function updateDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const departmentId = idFromUrl();\n        const departmentIndex = departments.findIndex(x => x.id === departmentId);\n        if (departmentIndex === -1) return notFound();\n        const oldDepartment = departments[departmentIndex];\n        const updatedDepartment = Object.assign(Object.assign(Object.assign({}, oldDepartment), body), {\n          id: departmentId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate department name is unique\n        if (departments.find(x => x.name === updatedDepartment.name && x.id !== updatedDepartment.id)) {\n          return error('Department name already exists');\n        }\n        departments.push(updatedDepartment);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, updatedDepartment), {\n          id: updatedDepartment.id.toString()\n        }));\n      }\n      function deleteDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const departmentId = idFromUrl();\n        const departmentIndex = departments.findIndex(x => x.id === departmentId);\n        if (departmentIndex === -1) return notFound();\n        const department = departments[departmentIndex];\n        // Delete department\n        departments = departments.filter(x => x.id !== departmentId);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, department), {\n          status: 'Deleted'\n        }));\n      }\n      // Position functions\n      function getPositions() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(positions.map(position => {\n          return Object.assign(Object.assign({}, position), {\n            id: position.id.toString(),\n            name: position.name,\n            description: position.description\n          });\n        }));\n      }\n      function getPositionById() {\n        if (!isAuthenticated()) return unauthorized();\n        const positionId = idFromUrl();\n        const position = positions.find(x => x.id === positionId);\n        if (!position) return notFound();\n        return ok(Object.assign(Object.assign({}, position), {\n          id: position.id.toString(),\n          name: position.name,\n          description: position.description\n        }));\n      }\n      function createPosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const position = body;\n        // Validate position name is unique\n        if (positions.find(x => x.name === position.name)) {\n          return error('Position name already exists');\n        }\n        // Assign position id and save\n        position.id = newPositionId();\n        positions.push(position);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, position), {\n          id: position.id.toString()\n        }));\n      }\n      function updatePosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const positionId = idFromUrl();\n        const positionIndex = positions.findIndex(x => x.id === positionId);\n        if (positionIndex === -1) return notFound();\n        const oldPosition = positions[positionIndex];\n        const updatedPosition = Object.assign(Object.assign(Object.assign({}, oldPosition), body), {\n          id: positionId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate position name is unique\n        if (positions.find(x => x.name === updatedPosition.name && x.id !== updatedPosition.id)) {\n          return error('Position name already exists');\n        }\n        positions.push(updatedPosition);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, updatedPosition), {\n          id: updatedPosition.id.toString()\n        }));\n      }\n      function deletePosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const positionId = idFromUrl();\n        const positionIndex = positions.findIndex(x => x.id === positionId);\n        if (positionIndex === -1) return notFound();\n        const position = positions[positionIndex];\n        // Delete position\n        positions = positions.filter(x => x.id !== positionId);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, position), {\n          status: 'Deleted'\n        }));\n      }\n      // Request type functions\n      function getRequestTypes() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(requestTypes.map(type => {\n          return Object.assign(Object.assign({}, type), {\n            id: type.id.toString(),\n            name: type.name,\n            description: type.description\n          });\n        }));\n      }\n      function getRequestTypeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const typeId = idFromUrl();\n        const type = requestTypes.find(x => x.id === typeId);\n        if (!type) return notFound();\n        return ok(Object.assign(Object.assign({}, type), {\n          id: type.id.toString(),\n          name: type.name,\n          description: type.description\n        }));\n      }\n      function createRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const type = body;\n        // Validate request type name is unique\n        if (requestTypes.find(x => x.name === type.name)) {\n          return error('Request type name already exists');\n        }\n        // Assign request type id and save\n        type.id = newRequestTypeId();\n        requestTypes.push(type);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, type), {\n          id: type.id.toString()\n        }));\n      }\n      function updateRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const typeId = idFromUrl();\n        const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n        if (typeIndex === -1) return notFound();\n        const oldType = requestTypes[typeIndex];\n        const updatedType = Object.assign(Object.assign(Object.assign({}, oldType), body), {\n          id: typeId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate request type name is unique\n        if (requestTypes.find(x => x.name === updatedType.name && x.id !== updatedType.id)) {\n          return error('Request type name already exists');\n        }\n        requestTypes.push(updatedType);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, updatedType), {\n          id: updatedType.id.toString()\n        }));\n      }\n      function deleteRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const typeId = idFromUrl();\n        const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n        if (typeIndex === -1) return notFound();\n        const type = requestTypes[typeIndex];\n        // Delete request type\n        requestTypes = requestTypes.filter(x => x.id !== typeId);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, type), {\n          status: 'Deleted'\n        }));\n      }\n      // Workflow functions\n      function getWorkflows() {\n        if (!isAuthenticated()) return unauthorized();\n        // Sort workflows in descending order by creation date\n        const sortedWorkflows = [...workflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      function getWorkflowById() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflow = workflows.find(x => x.id === idFromUrl());\n        if (!workflow) return notFound();\n        const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n        return ok({\n          id: workflow.id.toString(),\n          type: workflow.type,\n          details: details,\n          status: workflow.status,\n          datetimecreated: workflow.datetimecreated || workflow.createdDate\n        });\n      }\n      function getWorkflowsByRequestId() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = idFromUrl();\n        console.log('Looking for workflows with requestId:', requestId);\n        const request = requests.find(x => x.id === requestId);\n        if (!request) {\n          console.log('Request not found with id:', requestId);\n          return notFound();\n        }\n        const requestWorkflows = workflows.filter(x => x.requestId === requestId);\n        console.log('Found workflows:', requestWorkflows.length);\n        // Sort workflows in descending order\n        const sortedWorkflows = [...requestWorkflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      function createWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        console.log('Received workflow data:', body);\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: body.employeeId,\n          type: body.type,\n          details: body.details,\n          status: body.status,\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        // Validate required fields\n        const requiredFields = {\n          employeeId: !!workflow.employeeId,\n          type: !!workflow.type,\n          details: !!workflow.details,\n          status: !!workflow.status\n        };\n        console.log('Field validation results:', requiredFields);\n        // Check if any required field is missing\n        const missingFields = Object.entries(requiredFields).filter(([_, isValid]) => !isValid).map(([fieldName]) => fieldName);\n        if (missingFields.length > 0) {\n          return error(`Required fields are missing: ${missingFields.join(', ')}`);\n        }\n        // Validate employee exists\n        const employee = employees.find(e => e.id === workflow.employeeId);\n        if (!employee) return error('Employee not found');\n        employees.push(workflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function updateWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n        if (workflowIndex === -1) return notFound();\n        const oldWorkflow = workflows[workflowIndex];\n        const updatedWorkflow = Object.assign(Object.assign(Object.assign({}, oldWorkflow), body), {\n          id: workflowId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate employee exists\n        const employee = employees.find(e => e.id === updatedWorkflow.employeeId);\n        if (!employee) return error('Employee not found');\n        employees.push(updatedWorkflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, updatedWorkflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function updateWorkflowStatus() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflow = workflows.find(x => x.id === workflowId);\n        if (!workflow) return notFound();\n        const newStatus = body.status;\n        Object.assign(workflow, {\n          status: newStatus,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          status: newStatus\n        }));\n      }\n      function deleteWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n        if (workflowIndex === -1) return notFound();\n        const workflow = workflows[workflowIndex];\n        const employee = employees.find(e => e.id === workflow.employeeId);\n        // Delete workflow\n        workflows = workflows.filter(x => x.id !== workflowId);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function deleteWorkflowItem() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflow = workflows.find(x => x.id === workflowId);\n        if (!workflow) return notFound();\n        // Delete workflow item\n        workflows = workflows.filter(x => x.id !== workflowId);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          status: 'Deleted'\n        }));\n      }\n      function createAccount() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          return error('Email already exists');\n        }\n        account.id = newAccountId();\n        account.dateCreated = new Date().toISOString();\n        account.isVerified = true;\n        account.refreshTokens = [];\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(basicDetails(account));\n      }\n      function updateAccount() {\n        if (!isAuthenticated()) return unauthorized();\n        const accountId = idFromUrl();\n        const account = accounts.find(x => x.id === accountId);\n        if (!account) return notFound();\n        if (account.id !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Only allow admins to update role\n        if (!isAdmin()) {\n          delete body.role;\n        }\n        // If email is being changed, make sure it's not already taken\n        if (body.email && body.email !== account.email && accounts.find(x => x.email === body.email)) {\n          return error('Email already exists');\n        }\n        Object.assign(account, body);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(basicDetails(account));\n      }\n      function deleteAccount() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const accountId = idFromUrl();\n        const account = accounts.find(x => x.id === accountId);\n        if (!account) return notFound();\n        if (account.id === currentAccount().id) return error('You cannot delete your own account');\n        accounts = accounts.filter(x => x.id !== accountId);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n    }\n  }\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.AlertService));\n  };\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport const fakeBackendProvider = {\n  // use fake backend in place of Http service for backend-less development\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":{"version":3,"mappings":"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","names":["HttpResponse","HTTP_INTERCEPTORS","of","throwError","delay","materialize","dematerialize","Role","accountsKey","accounts","JSON","parse","localStorage","getItem","employeesKey","employees","departmentsKey","departments","id","name","description","requestsKey","requests","requestItemsKey","requestItems","workflowsKey","workflows","positionsKey","positions","requestTypesKey","requestTypes","newAccountId","length","Math","max","map","x","newRequestId","newRequestItemId","newEmployeeId","newWorkflowId","newDepartmentId","newPositionId","newRequestTypeId","generateJwtToken","account","header","btoa","stringify","alg","typ","now","Date","getTime","payload","role","email","iat","exp","payloadBase64","signature","error","console","generateRefreshToken","random","toString","substr","isTokenExpired","token","parts","split","atob","FakeBackendInterceptor","constructor","alertService","intercept","request","next","url","method","headers","body","ok","status","message","unauthorized","notFound","basicDetails","title","firstName","lastName","isVerified","isAuthenticated","authHeader","get","startsWith","log","find","isAdmin","Admin","currentAccount","idFromUrl","urlParts","parseInt","getRefreshToken","getWorkflowsByEmployeeId","internalId","pop","employee","e","employeeRequests","filter","employeeId","sortedRequests","sort","a","b","dateA","createdDate","dateB","items","item","requestId","requestType","t","typeId","accountId","charAt","toUpperCase","slice","toLowerCase","fullName","trim","type","handleRoute","pipe","endsWith","authenticate","refreshToken","revokeToken","register","verifyEmail","getAccounts","match","getAccountById","createAccount","updateAccount","deleteAccount","getRequests","getRequestById","getRequestsByEmployeeId","getMyRequests","createRequest","updateRequest","changeRequestStatus","deleteRequest","getEmployees","getEmployeeById","createEmployee","updateEmployee","deleteEmployee","transferEmployee","getDepartments","getDepartmentById","createDepartment","updateDepartment","deleteDepartment","getPositions","getPositionById","createPosition","updatePosition","deletePosition","getRequestTypes","getRequestTypeById","createRequestType","updateRequestType","deleteRequestType","getWorkflows","getWorkflowById","getWorkflowsByRequestId","createWorkflow","updateWorkflow","updateWorkflowStatus","deleteWorkflow","deleteWorkflowItem","handle","password","refreshTokens","rt","push","setItem","jwtToken","includes","newRefreshToken","setTimeout","info","location","origin","autoclose","User","dateCreated","toISOString","verificationToken","confirmPassword","verifyUrl","filteredRequests","currentUserId","requestEmployee","requestAccount","quantity","Object","myRequests","targetEmployee","employeeIdNum","Number","currentUser","lastModifiedDate","requestItemsList","Array","isArray","Error","response","assign","newItems","newStatus","requestIndex","findIndex","department","d","departmentId","departmentName","position","hireDate","salary","requiredFields","missingFields","entries","_","isValid","fieldName","join","workflow","details","task","additionalInfo","employeeIndex","oldEmployee","updatedEmployee","oldDepartmentId","oldDepartment","newDepartment","departmentIndex","updatedDepartment","positionId","positionIndex","oldPosition","updatedPosition","typeIndex","oldType","updatedType","sortedWorkflows","datetimecreated","requestWorkflows","workflowId","workflowIndex","oldWorkflow","updatedWorkflow","factory","fakeBackendProvider","provide","useClass","multi"],"sourceRoot":"","sources":["C:\\Users\\marlo\\OneDrive\\Desktop\\New folder (2)\\final-intprog-project\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\r\n\r\nimport { AlertService } from '@app/_services';\r\nimport { Role } from '@app/_models';\r\n\r\n// array in local storage for accounts\r\nconst accountsKey = 'request-management-accounts';\r\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\r\n\r\n// array in local storage for employees\r\nconst employeesKey = 'request-management-employees';\r\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\r\n\r\n// array in local storage for departments\r\nconst departmentsKey = 'request-management-departments';\r\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [\r\n    { id: 1, name: 'HR', description: 'Human Resources' },\r\n    { id: 2, name: 'IT', description: 'Information Technology' },\r\n    { id: 3, name: 'Finance', description: 'Finance Department' },\r\n    { id: 4, name: 'Marketing', description: 'Marketing Department' }\r\n];\r\n\r\n// array in local storage for requests and their items\r\nconst requestsKey = 'request-management-requests';\r\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\r\n\r\n// array in local storage for request items\r\nconst requestItemsKey = 'request-management-items';\r\nlet requestItems = JSON.parse(localStorage.getItem(requestItemsKey)) || [];\r\n\r\n// array in local storage for workflows\r\nconst workflowsKey = 'request-management-workflows';\r\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\r\n\r\n// array in local storage for employee positions\r\nconst positionsKey = 'request-management-positions';\r\nlet positions = JSON.parse(localStorage.getItem(positionsKey)) || [\r\n    { id: 1, name: 'Manager', description: 'Department Manager' },\r\n    { id: 2, name: 'Team Lead', description: 'Team Leader' },\r\n    { id: 3, name: 'Senior Staff', description: 'Senior Level Staff' },\r\n    { id: 4, name: 'Junior Staff', description: 'Junior Level Staff' }\r\n];\r\n\r\n// array in local storage for request types\r\nconst requestTypesKey = 'request-management-request-types';\r\nlet requestTypes = JSON.parse(localStorage.getItem(requestTypesKey)) || [\r\n    { id: 1, name: 'Leave Request', description: 'Request for leave or time off' },\r\n    { id: 2, name: 'Equipment Request', description: 'Request for office equipment' },\r\n    { id: 3, name: 'Training Request', description: 'Request for training or workshops' },\r\n    { id: 4, name: 'Other', description: 'Other types of requests' }\r\n];\r\n\r\n// Helper functions for generating IDs\r\nfunction newAccountId(): number {\r\n    return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\r\n}\r\n\r\nfunction newRequestId(): number {\r\n    return requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\r\n}\r\n\r\nfunction newRequestItemId(): number {\r\n    return requestItems.length ? Math.max(...requestItems.map(x => x.id)) + 1 : 1;\r\n}\r\n\r\nfunction newEmployeeId(): number {\r\n    return employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1;\r\n}\r\n\r\nfunction newWorkflowId(): number {\r\n    return workflows.length ? Math.max(...workflows.map(x => x.id)) + 1 : 1;\r\n}\r\n\r\nfunction newDepartmentId(): number {\r\n    return departments.length ? Math.max(...departments.map(x => x.id)) + 1 : 1;\r\n}\r\n\r\nfunction newPositionId(): number {\r\n    return positions.length ? Math.max(...positions.map(x => x.id)) + 1 : 1;\r\n}\r\n\r\nfunction newRequestTypeId(): number {\r\n    return requestTypes.length ? Math.max(...requestTypes.map(x => x.id)) + 1 : 1;\r\n}\r\n\r\n// Helper functions for JWT and refresh tokens\r\nfunction generateJwtToken(account: any): string {\r\n    try {\r\n        const header = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }));\r\n        const now = new Date().getTime();\r\n        const payload = {\r\n            id: account.id,\r\n            role: account.role,\r\n            email: account.email,\r\n            iat: now,\r\n            exp: now + (60 * 60 * 1000) // 1 hour expiry\r\n        };\r\n        const payloadBase64 = btoa(JSON.stringify(payload));\r\n        const signature = btoa('fake-jwt-secret-key');\r\n        return `${header}.${payloadBase64}.${signature}`;\r\n    } catch (error) {\r\n        console.error('Error generating JWT token:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction generateRefreshToken(): string {\r\n    try {\r\n        const header = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }));\r\n        const now = new Date().getTime();\r\n        const payload = {\r\n            id: Math.random().toString(36).substr(2),\r\n            iat: now,\r\n            exp: now + (7 * 24 * 60 * 60 * 1000) // 7 days expiry\r\n        };\r\n        const payloadBase64 = btoa(JSON.stringify(payload));\r\n        const signature = btoa('fake-refresh-secret-key');\r\n        return `${header}.${payloadBase64}.${signature}`;\r\n    } catch (error) {\r\n        console.error('Error generating refresh token:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction isTokenExpired(token: string): boolean {\r\n    if (!token) return true;\r\n    \r\n    try {\r\n        const parts = token.split('.');\r\n        if (parts.length !== 3) return true;\r\n        \r\n        const payload = JSON.parse(atob(parts[1]));\r\n        if (!payload || typeof payload.exp !== 'number') return true;\r\n        \r\n        // Add a 5-minute buffer to prevent edge cases\r\n        return (payload.exp - 5 * 60 * 1000) < new Date().getTime();\r\n    } catch (error) {\r\n        console.error('Error checking token expiration:', error);\r\n        return true;\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class FakeBackendInterceptor implements HttpInterceptor {\r\n    constructor(private alertService: AlertService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const { url, method, headers, body } = request;\r\n        const alertService = this.alertService;\r\n\r\n        // Helper functions\r\n        function ok(body?: any) {\r\n            return of(new HttpResponse({ status: 200, body }));\r\n        }\r\n\r\n        function error(message: string) {\r\n            return throwError(() => ({ error: { message } }));\r\n        }\r\n\r\n        function unauthorized() {\r\n            return throwError(() => ({ status: 401, error: { message: 'Unauthorized' } }));\r\n        }\r\n\r\n        function notFound() {\r\n            return throwError(() => ({ status: 404, error: { message: 'Not Found' } }));\r\n        }\r\n\r\n        function basicDetails(account: any) {\r\n            const { id, title, firstName, lastName, email, role, status, isVerified } = account;\r\n            return { id, title, firstName, lastName, email, role, status, isVerified };\r\n        }\r\n\r\n        function isAuthenticated() {\r\n            try {\r\n                const authHeader = headers.get('Authorization');\r\n                if (!authHeader?.startsWith('Bearer ')) return false;\r\n                \r\n                const token = authHeader.split(' ')[1];\r\n                if (isTokenExpired(token)) {\r\n                    console.log('JWT token has expired');\r\n                    return false;\r\n                }\r\n                \r\n                const parts = token.split('.');\r\n                const payload = JSON.parse(atob(parts[1]));\r\n                const account = accounts.find(x => x.id === payload.id);\r\n                \r\n                return !!account;\r\n            } catch (error) {\r\n                console.error('Authentication check error:', error);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        function isAdmin() {\r\n            return currentAccount()?.role === Role.Admin;\r\n        }\r\n\r\n        function currentAccount() {\r\n            if (!isAuthenticated()) return null;\r\n            \r\n            try {\r\n                const token = headers.get('Authorization').split(' ')[1];\r\n                const parts = token.split('.');\r\n                const payload = JSON.parse(atob(parts[1]));\r\n                return accounts.find(x => x.id === payload.id);\r\n            } catch {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        function idFromUrl() {\r\n            const urlParts = url.split('/');\r\n            return parseInt(urlParts[urlParts.length - 1]);\r\n        }\r\n\r\n        function getRefreshToken(headers: any): string | null {\r\n            try {\r\n                const authHeader = headers.get('Authorization');\r\n                if (!authHeader?.startsWith('Bearer ')) return null;\r\n                return authHeader.split(' ')[1];\r\n            } catch {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        function getWorkflowsByEmployeeId() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            \r\n            const internalId = parseInt(url.split('/').pop());\r\n            console.log('Looking for requests with employeeId:', internalId);\r\n\r\n            const employee = employees.find(e => e.id === internalId);\r\n            if (!employee) {\r\n                console.log('Employee not found with internal id:', internalId);\r\n                return notFound();\r\n            }\r\n            \r\n            const employeeRequests = requests.filter(x => x.employeeId === employee.id);\r\n            console.log('Found requests:', employeeRequests.length);\r\n\r\n            // Sort requests in descending order by creation date\r\n            const sortedRequests = [...employeeRequests].sort((a, b) => {\r\n                const dateA = new Date(a.createdDate);\r\n                const dateB = new Date(b.createdDate);\r\n                return dateB.getTime() - dateA.getTime();\r\n            });\r\n\r\n            return ok(sortedRequests.map(request => {\r\n                const items = requestItems.filter(item => item.requestId === request.id);\r\n                const requestType = requestTypes.find(t => t.id === request.typeId);\r\n                const account = accounts.find(a => a.id === employee.accountId);\r\n                \r\n                // Format employee name with proper capitalization\r\n                const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\r\n                const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\r\n                const fullName = `${firstName} ${lastName}`.trim();\r\n\r\n                return {\r\n                    id: request.id,\r\n                    type: requestType?.name || request.type,\r\n                    status: request.status,\r\n                    createdDate: request.createdDate,\r\n                    items: items,\r\n                    employee: {\r\n                        id: employee.id,\r\n                        employeeId: employee.employeeId,\r\n                        fullName: fullName\r\n                    }\r\n                };\r\n            }));\r\n        }\r\n\r\n        return handleRoute().pipe(\r\n            delay(500),\r\n            materialize(),\r\n            dematerialize()\r\n        );\r\n\r\n        function handleRoute() {\r\n            switch (true) {\r\n                case url.endsWith('/accounts/authenticate') && method === 'POST':\r\n                    return authenticate();\r\n                case url.endsWith('/accounts/refresh-token') && method === 'POST':\r\n                    return refreshToken();\r\n                case url.endsWith('/accounts/revoke-token') && method === 'POST':\r\n                    return revokeToken();\r\n                case url.endsWith('/accounts/register') && method === 'POST':\r\n                    return register();\r\n                case url.endsWith('/accounts/verify-email') && method === 'POST':\r\n                    return verifyEmail();\r\n                case url.endsWith('/accounts') && method === 'GET':\r\n                    return getAccounts();\r\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\r\n                    return getAccountById();\r\n                case url.endsWith('/accounts') && method === 'POST':\r\n                    return createAccount();\r\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\r\n                    return updateAccount();\r\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\r\n                    return deleteAccount();\r\n                    \r\n                // request routes\r\n                case url.endsWith('/requests') && method === 'GET':\r\n                    return getRequests();\r\n                case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\r\n                    return getRequestById();\r\n                case url.match(/\\/requests\\/employee\\/\\d+$/) && method === 'GET':\r\n                    return getRequestsByEmployeeId();\r\n                case url.endsWith('/requests/my-requests') && method === 'GET':\r\n                    return getMyRequests();\r\n                case url.endsWith('/requests') && method === 'POST':\r\n                    return createRequest();\r\n                case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\r\n                    return updateRequest();\r\n                case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\r\n                    return changeRequestStatus();\r\n                case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\r\n                    return deleteRequest();\r\n                    \r\n                // employee routes\r\n                case url.endsWith('/employees') && method === 'GET':\r\n                    return getEmployees();\r\n                case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\r\n                    return getEmployeeById();\r\n                case url.endsWith('/employees') && method === 'POST':\r\n                    return createEmployee();\r\n                case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\r\n                    return updateEmployee();\r\n                case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\r\n                    return deleteEmployee();\r\n                case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'PUT':\r\n                    return transferEmployee();\r\n\r\n                // department routes\r\n                case url.endsWith('/departments') && method === 'GET':\r\n                    return getDepartments();\r\n                case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\r\n                    return getDepartmentById();\r\n                case url.endsWith('/departments') && method === 'POST':\r\n                    return createDepartment();\r\n                case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\r\n                    return updateDepartment();\r\n                case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\r\n                    return deleteDepartment();\r\n                    \r\n                // position routes\r\n                case url.endsWith('/positions') && method === 'GET':\r\n                    return getPositions();\r\n                case url.match(/\\/positions\\/\\d+$/) && method === 'GET':\r\n                    return getPositionById();\r\n                case url.endsWith('/positions') && method === 'POST':\r\n                    return createPosition();\r\n                case url.match(/\\/positions\\/\\d+$/) && method === 'PUT':\r\n                    return updatePosition();\r\n                case url.match(/\\/positions\\/\\d+$/) && method === 'DELETE':\r\n                    return deletePosition();\r\n\r\n                // request type routes\r\n                case url.endsWith('/request-types') && method === 'GET':\r\n                    return getRequestTypes();\r\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'GET':\r\n                    return getRequestTypeById();\r\n                case url.endsWith('/request-types') && method === 'POST':\r\n                    return createRequestType();\r\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'PUT':\r\n                    return updateRequestType();\r\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'DELETE':\r\n                    return deleteRequestType();\r\n\r\n                // workflow routes\r\n                case url.endsWith('/workflows') && method === 'GET':\r\n                    return getWorkflows();\r\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'GET':\r\n                    return getWorkflowById();\r\n                case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\r\n                    return getWorkflowsByEmployeeId();\r\n                case url.match(/\\/workflows\\/request\\/\\d+$/) && method === 'GET':\r\n                    return getWorkflowsByRequestId();\r\n                case url.endsWith('/workflows') && method === 'POST':\r\n                    return createWorkflow();\r\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\r\n                    return updateWorkflow();\r\n                case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\r\n                    return updateWorkflowStatus();\r\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'DELETE':\r\n                    return deleteWorkflow();\r\n                case url.match(/\\/workflows\\/items\\/\\d+$/) && method === 'DELETE':\r\n                    return deleteWorkflowItem();\r\n                    \r\n                default:\r\n                    return next.handle(request);\r\n            }\r\n        }\r\n\r\n        // Authentication functions\r\n        function authenticate() {\r\n            const { email, password } = body;\r\n            const account = accounts.find(x => x.email === email);\r\n        \r\n            if (!account) return error('Email or password is incorrect');\r\n            if (password !== account.password) return error('Email or password is incorrect');\r\n            if (!account.isVerified) return error('Please verify your email before logging in');\r\n\r\n            try {\r\n                // Generate refresh token that expires in 7 days\r\n                const refreshToken = generateRefreshToken();\r\n                account.refreshTokens = account.refreshTokens || [];\r\n                \r\n                // Remove any expired refresh tokens\r\n                account.refreshTokens = account.refreshTokens.filter(rt => !isTokenExpired(rt));\r\n                \r\n                account.refreshTokens.push(refreshToken);\r\n                localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n                const jwtToken = generateJwtToken(account);\r\n        \r\n            return ok({\r\n                ...basicDetails(account),\r\n                    jwtToken,\r\n                    refreshToken\r\n            });\r\n            } catch (error) {\r\n                console.error('Authentication error:', error);\r\n                return error('An error occurred during authentication');\r\n            }\r\n        }\r\n\r\n        function refreshToken() {\r\n            try {\r\n                const refreshToken = getRefreshToken(headers);\r\n                if (!refreshToken) {\r\n                    console.log('No refresh token found');\r\n                    return unauthorized();\r\n                }\r\n\r\n            const account = accounts.find(x => x.refreshTokens?.includes(refreshToken));\r\n                if (!account) {\r\n                    console.log('No account found for refresh token');\r\n                    return unauthorized();\r\n                }\r\n\r\n                // Verify refresh token hasn't expired\r\n                if (isTokenExpired(refreshToken)) {\r\n                    console.log('Refresh token has expired');\r\n                    // Remove expired refresh token\r\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n                    return unauthorized();\r\n                }\r\n\r\n                // Generate new tokens\r\n                const newRefreshToken = generateRefreshToken();\r\n                const jwtToken = generateJwtToken(account);\r\n\r\n                // Update refresh tokens\r\n                account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken && !isTokenExpired(x));\r\n                account.refreshTokens.push(newRefreshToken);\r\n                localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n                console.log('Token refresh successful');\r\n            return ok({\r\n                ...basicDetails(account),\r\n                    jwtToken,\r\n                    refreshToken: newRefreshToken\r\n            });\r\n            } catch (error) {\r\n                console.error('Refresh token error:', error);\r\n                return unauthorized();\r\n            }\r\n        }\r\n\r\n        function revokeToken() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n\r\n            const refreshToken = getRefreshToken(headers);\r\n            const account = accounts.find(x => x.refreshTokens?.includes(refreshToken));\r\n\r\n            // revoke token and save\r\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n            return ok();\r\n        }\r\n\r\n        function register() {\r\n            const account = body;\r\n\r\n            if (accounts.find(x => x.email === account.email)) {\r\n                // display email already registered message in alert\r\n                setTimeout(() => {\r\n                    alertService.info(`\r\n                        <h4>Email Already Registered</h4>\r\n                        <p>Your email ${account.email} is already registered.</p>\r\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\r\n                        <div>\r\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\r\n                        </div>\r\n                    `, { autoclose: false });\r\n                }, 1000);\r\n\r\n                // always return ok() response to prevent email enumeration\r\n                return ok();\r\n            }\r\n\r\n            // assign account id and a few other properties then save\r\n            account.id = newAccountId();\r\n            if (account.id === 1) {\r\n                // first registered account is an admin\r\n                account.role = Role.Admin;\r\n                account.status = 'Active'; // Admin accounts get active status\r\n            } else {\r\n                account.role = Role.User;\r\n                account.status = 'Inactive'; // User accounts get inacitve status upon creation\r\n            }\r\n            account.dateCreated = new Date().toISOString();\r\n            account.verificationToken = new Date().getTime().toString();\r\n            account.isVerified = false;\r\n            account.refreshTokens = [];\r\n            delete account.confirmPassword;\r\n            accounts.push(account);\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n            // display verification email in alert\r\n            setTimeout(() => {\r\n                const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\r\n                alertService.info(`\r\n                    <h4>Verification Email</h4>\r\n                    <p>Thanks for registering!</p>\r\n                    <p>Please click the below link to verify your email address:</p>\r\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\r\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\r\n                `, { autoclose: false });\r\n            }, 1000);\r\n\r\n            return ok();\r\n        }\r\n\r\n        function verifyEmail() {\r\n            const { token } = body;\r\n            const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\r\n\r\n            if (!account) return error('Verification failed');\r\n\r\n            // set is verified flag to true if token is valid\r\n            account.isVerified = true;\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n\r\n            return ok();\r\n        }\r\n\r\n        function getAccounts() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            return ok(accounts.map(x => basicDetails(x)));\r\n        }\r\n\r\n        function getAccountById() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n\r\n            let account = accounts.find(x => x.id === idFromUrl());\r\n\r\n            // user accounts can get own profile and admin accounts can get all profiles\r\n            if (account.id !== currentAccount().id && !isAdmin()) {\r\n                return unauthorized();\r\n            }\r\n\r\n            return ok(basicDetails(account));\r\n        }\r\n\r\n        // Request functions\r\n        function getRequests() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n\r\n            // Return all requests for admins, or filtered for regular users\r\n            let filteredRequests = [...requests];\r\n            if (!isAdmin()) {\r\n                const currentUserId = currentAccount().id;\r\n                filteredRequests = requests.filter(x => x.employeeId === currentUserId);\r\n            }\r\n\r\n            return ok(filteredRequests.map(request => {\r\n                const items = requestItems.filter(item => item.requestId === request.id);\r\n                const requestEmployee = employees.find(e => e.id === request.employeeId);\r\n                const requestAccount = accounts.find(a => a.id === requestEmployee?.accountId);\r\n                const requestType = requestTypes.find(t => t.id === request.typeId);\r\n\r\n                return {\r\n                    id: request.id,\r\n                    employeeId: requestEmployee?.employeeId || '',\r\n                    type: requestType?.name || request.type || '',\r\n                    status: request.status,\r\n                    createdDate: request.createdDate,\r\n                    items: items,\r\n                    employee: {\r\n                        id: requestEmployee?.id,\r\n                        employeeId: requestEmployee?.employeeId,\r\n                        fullName: requestAccount ? `${requestAccount.firstName} ${requestAccount.lastName}`.trim() : ''\r\n                    }\r\n                };\r\n            }));\r\n        }\r\n\r\n        function getRequestById() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n\r\n            const request = requests.find(x => x.id === idFromUrl());\r\n            if (!request) return notFound();\r\n\r\n            // Check authorization\r\n            if (!isAdmin() && request.employeeId !== currentAccount().id) {\r\n                return unauthorized();\r\n            }\r\n\r\n            // Add related data\r\n            const items = requestItems.filter(item => item.requestId === request.id);\r\n            const employee = employees.find(e => e.id === request.employeeId);\r\n            const account = accounts.find(a => a.id === employee?.accountId);\r\n            const requestType = requestTypes.find(t => t.id === request.typeId);\r\n\r\n            // Format employee name with proper capitalization\r\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\r\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\r\n            const fullName = `${firstName} ${lastName}`.trim();\r\n\r\n            return ok({\r\n                ...request,\r\n                items: items.map(item => ({\r\n                    id: item.id,\r\n                    name: item.name,\r\n                    quantity: item.quantity\r\n                })),\r\n                employee: employee ? {\r\n                    ...employee,\r\n                    fullName: fullName,\r\n                    employeeId: employee.employeeId\r\n                } : null,\r\n                type: requestType?.name || request.type\r\n            });\r\n        }\r\n\r\n        function getRequestsByEmployeeId() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            \r\n            const internalId = parseInt(url.split('/').pop());\r\n            console.log('Looking for requests with employeeId:', internalId);\r\n\r\n            const employee = employees.find(e => e.id === internalId);\r\n            if (!employee) {\r\n                console.log('Employee not found with internal id:', internalId);\r\n                return notFound();\r\n            }\r\n            \r\n            const employeeRequests = requests.filter(x => x.employeeId === employee.id);\r\n            console.log('Found requests:', employeeRequests.length);\r\n\r\n            // Sort requests in descending order by creation date\r\n            const sortedRequests = [...employeeRequests].sort((a, b) => {\r\n                const dateA = new Date(a.createdDate);\r\n                const dateB = new Date(b.createdDate);\r\n                return dateB.getTime() - dateA.getTime();\r\n            });\r\n\r\n            return ok(sortedRequests.map(request => {\r\n                const items = requestItems.filter(item => item.requestId === request.id);\r\n                const requestType = requestTypes.find(t => t.id === request.typeId);\r\n                const account = accounts.find(a => a.id === employee.accountId);\r\n                \r\n                // Format employee name with proper capitalization\r\n                const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\r\n                const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\r\n                const fullName = `${firstName} ${lastName}`.trim();\r\n\r\n                return {\r\n                    id: request.id,\r\n                    type: requestType?.name || request.type,\r\n                    status: request.status,\r\n                    createdDate: request.createdDate,\r\n                    items: items,\r\n                    employee: {\r\n                        id: employee.id,\r\n                        employeeId: employee.employeeId,\r\n                        fullName: fullName\r\n                    }\r\n                };\r\n            }));\r\n        }\r\n\r\n        function getMyRequests() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n\r\n            const currentUserId = currentAccount().id;\r\n            const myRequests = requests.filter(x => x.employeeId === currentUserId);\r\n\r\n            return ok(myRequests.map(request => {\r\n                const items = requestItems.filter(item => item.requestId === request.id);\r\n                const employee = employees.find(e => e.id === request.employeeId);\r\n                const account = accounts.find(a => a.id === employee?.accountId);\r\n                const requestType = requestTypes.find(t => t.id === request.typeId);\r\n                return {\r\n                    ...request,\r\n                    items,\r\n                    employee: employee ? {\r\n                        ...employee,\r\n                        fullName: `${account?.firstName || ''} ${account?.lastName || ''}`.trim(),\r\n                        employeeId: employee.employeeId\r\n                    } : null,\r\n                    type: requestType ? requestType.name : request.type\r\n                };\r\n            }));\r\n        }\r\n\r\n        function createRequest() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n\r\n            console.log('Received request data:', body);\r\n\r\n            // Find employee by employeeId\r\n            let targetEmployee;\r\n            if (body.employeeId) {\r\n                // Try to find by internal ID first\r\n                const employeeIdNum = Number(body.employeeId);\r\n                targetEmployee = employees.find(e => e.id === employeeIdNum);\r\n                \r\n                if (!targetEmployee) {\r\n                    // If not found by internal ID, try to find by employee ID string\r\n                    targetEmployee = employees.find(e => e.employeeId === body.employeeId);\r\n                }\r\n                \r\n                if (!targetEmployee) {\r\n                    console.error('Employee not found for ID:', body.employeeId);\r\n                    return error('Employee not found');\r\n                }\r\n            } else {\r\n                // If no employeeId provided, use current user\r\n                const currentUser = currentAccount();\r\n                targetEmployee = employees.find(e => e.accountId === currentUser.id);\r\n                if (!targetEmployee) {\r\n                    console.error('No employee found for current user');\r\n                    return error('Current user is not an employee');\r\n                }\r\n            }\r\n\r\n            console.log('Target employee found:', targetEmployee);\r\n\r\n            const request = {\r\n                id: newRequestId(),\r\n                employeeId: targetEmployee.id,\r\n                typeId: body.typeId ? Number(body.typeId) : null,\r\n                type: body.type,\r\n                description: body.description || '',\r\n                status: 'Pending',\r\n                createdDate: new Date().toISOString(),\r\n                lastModifiedDate: new Date().toISOString()\r\n            };\r\n\r\n            console.log('Creating request:', request);\r\n\r\n            // Validate required fields\r\n            if (!request.type && !request.typeId) {\r\n                return error('Request type is required');\r\n            }\r\n\r\n            // Validate and process items if present\r\n            let requestItemsList = [];\r\n            if (body.items && Array.isArray(body.items)) {\r\n                try {\r\n                    requestItemsList = body.items.map(item => {\r\n                        if (!item.name || !item.quantity) {\r\n                            throw new Error('Invalid item data');\r\n                        }\r\n                        return {\r\n                    id: newRequestItemId(),\r\n                    requestId: request.id,\r\n                    name: item.name,\r\n                            quantity: Number(item.quantity)\r\n                        };\r\n                    });\r\n                } catch (error) {\r\n                    return error('Invalid item data provided');\r\n                }\r\n            }\r\n\r\n            // Save request and items\r\n            requests.push(request);\r\n            if (requestItemsList.length > 0) {\r\n                requestItems.push(...requestItemsList);\r\n                localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\r\n            }\r\n\r\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\r\n\r\n            const account = accounts.find(a => a.id === targetEmployee.accountId);\r\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\r\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\r\n            const fullName = `${firstName} ${lastName}`.trim();\r\n\r\n            const response = {\r\n                ...request,\r\n                items: requestItemsList,\r\n                employee: {\r\n                    id: targetEmployee.id,\r\n                    employeeId: targetEmployee.employeeId,\r\n                    fullName: fullName\r\n                }\r\n            };\r\n\r\n            console.log('Created request:', response);\r\n            return ok(response);\r\n        }\r\n\r\n        function updateRequest() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n\r\n            console.log('Received update data:', body);\r\n\r\n            const requestId = idFromUrl();\r\n            const request = requests.find(x => x.id === requestId);\r\n\r\n            if (!request) return notFound();\r\n            if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\r\n\r\n            // Update basic request fields\r\n            Object.assign(request, {\r\n                type: body.type,\r\n                description: body.description || request.description,\r\n                lastModifiedDate: new Date().toISOString()\r\n            });\r\n\r\n            // Handle item changes\r\n            if (body.items) {\r\n                // Remove all existing items for this request\r\n                requestItems = requestItems.filter(item => item.requestId !== requestId);\r\n\r\n                // Add new/updated items\r\n                const newItems = body.items.map(item => ({\r\n                    id: item.id || newRequestItemId(),\r\n                        requestId: requestId,\r\n                        name: item.name,\r\n                    quantity: Number(item.quantity)\r\n                    }));\r\n\r\n                requestItems.push(...newItems);\r\n                localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\r\n            }\r\n\r\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\r\n\r\n            // Get related data for response\r\n            const employee = employees.find(e => e.id === request.employeeId);\r\n            const account = accounts.find(a => a.id === employee?.accountId);\r\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\r\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\r\n            const fullName = `${firstName} ${lastName}`.trim();\r\n\r\n            return ok({\r\n                ...request,\r\n                items: requestItems.filter(item => item.requestId === requestId),\r\n                employee: employee ? {\r\n                    ...employee,\r\n                    fullName: fullName,\r\n                    employeeId: employee.employeeId\r\n                } : null\r\n            });\r\n        }\r\n\r\n        function changeRequestStatus() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n\r\n            const requestId = idFromUrl();\r\n            const request = requests.find(x => x.id === requestId);\r\n            \r\n            if (!request) return notFound();\r\n\r\n            const newStatus = body.status;\r\n            if (!newStatus) return error('Status is required');\r\n\r\n            // Update request\r\n            request.status = newStatus;\r\n            request.lastModifiedDate = new Date().toISOString();\r\n\r\n            // Update requests array\r\n            const requestIndex = requests.findIndex(x => x.id === requestId);\r\n            requests[requestIndex] = request;\r\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\r\n\r\n            // Get related data for response\r\n            const employee = employees.find(e => e.id === request.employeeId);\r\n            const account = accounts.find(a => a.id === employee?.accountId);\r\n            const requestType = requestTypes.find(t => t.id === request.typeId);\r\n            const items = requestItems.filter(item => item.requestId === request.id);\r\n\r\n            // Format employee name\r\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\r\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\r\n            const fullName = `${firstName} ${lastName}`.trim();\r\n\r\n            return ok({\r\n                ...request,\r\n                type: requestType?.name || request.type,\r\n                items: items,\r\n                employee: employee ? {\r\n                    id: employee.id,\r\n                    employeeId: employee.employeeId,\r\n                    fullName: fullName\r\n                } : null\r\n            });\r\n        }\r\n\r\n        function deleteRequest() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n\r\n            const requestId = idFromUrl();\r\n            const request = requests.find(x => x.id === requestId);\r\n\r\n            if (!request) return notFound();\r\n            if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\r\n\r\n            // Delete request and its items\r\n            requests = requests.filter(x => x.id !== requestId);\r\n            requestItems = requestItems.filter(x => x.requestId !== requestId);\r\n\r\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\r\n            localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\r\n\r\n            return ok();\r\n        }\r\n\r\n        // Employee functions\r\n        function getEmployees() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            \r\n            return ok(employees.map(employee => {\r\n                const department = departments.find(d => d.id === employee.departmentId);\r\n                const account = accounts.find(a => a.id === employee.accountId);\r\n                \r\n                // Format names with proper capitalization\r\n                const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\r\n                const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\r\n                \r\n                return {\r\n                    ...employee,\r\n                    employeeId: employee.employeeId,\r\n                    fullName: `${firstName} ${lastName}`.trim(),\r\n                    departmentName: department?.name || '',\r\n                    department: department ? {\r\n                        id: department.id,\r\n                        name: department.name,\r\n                        description: department.description\r\n                    } : null,\r\n                    account: account ? basicDetails(account) : null\r\n                };\r\n            }));\r\n        }\r\n\r\n        function getEmployeeById() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            \r\n            const employeeId = idFromUrl();\r\n            const employee = employees.find(x => x.id === employeeId);\r\n            \r\n            if (!employee) return notFound();\r\n            \r\n            // Get fresh department data\r\n            const department = departments.find(d => d.id === employee.departmentId);\r\n            if (!department) return error('Department not found');\r\n            \r\n            const account = accounts.find(a => a.id === employee.accountId);\r\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\r\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\r\n            \r\n            // Return complete employee data with fresh relations\r\n            return ok({\r\n                ...employee,\r\n                employeeId: employee.employeeId,\r\n                fullName: `${firstName} ${lastName}`.trim(),\r\n                departmentName: department.name,\r\n                department: {\r\n                    id: department.id,\r\n                    name: department.name,\r\n                    description: department.description\r\n                },\r\n                account: basicDetails(account)\r\n            });\r\n        }\r\n\r\n        function createEmployee() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n            \r\n            // Log the received data for debugging\r\n            console.log('Received employee data:', body);\r\n\r\n            // Check if employee ID already exists\r\n            if (employees.find(x => x.employeeId === body.employeeId)) {\r\n                return error('Employee ID already exists');\r\n            }\r\n\r\n            // Validate department exists\r\n            const department = departments.find(d => d.id === Number(body.departmentId));\r\n            if (!department) return error('Department not found');\r\n\r\n            // Validate account exists and isn't already assigned to an employee\r\n            const account = accounts.find(a => a.id === Number(body.accountId));\r\n            if (!account) return error('Account not found');\r\n            if (employees.find(e => e.accountId === Number(body.accountId))) {\r\n                return error('Account is already assigned to another employee');\r\n            }\r\n\r\n            const employee = {\r\n                id: newEmployeeId(),\r\n                accountId: Number(body.accountId),\r\n                employeeId: body.employeeId,\r\n                departmentId: Number(body.departmentId),\r\n                position: body.position,\r\n                hireDate: body.hireDate,\r\n                salary: Number(body.salary),\r\n                status: body.status || 'Active',\r\n                createdDate: new Date().toISOString(),\r\n                lastModifiedDate: new Date().toISOString()\r\n            };\r\n            \r\n            // Check each required field individually and log the result\r\n            const requiredFields = {\r\n                accountId: !!employee.accountId,\r\n                employeeId: !!employee.employeeId,\r\n                departmentId: !!employee.departmentId,\r\n                position: !!employee.position,\r\n                hireDate: !!employee.hireDate,\r\n                salary: !!employee.salary\r\n            };\r\n            \r\n            console.log('Field validation results:', requiredFields);\r\n            \r\n            // Check if any required field is missing\r\n            const missingFields = Object.entries(requiredFields)\r\n                .filter(([_, isValid]) => !isValid)\r\n                .map(([fieldName]) => fieldName);\r\n            \r\n            if (missingFields.length > 0) {\r\n                return error(`Required fields are missing: ${missingFields.join(', ')}`);\r\n            }\r\n\r\n            // Format names\r\n            const firstName = account.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\r\n            const lastName = account.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\r\n            \r\n            // Create workflow entry for new employee\r\n            const workflow = {\r\n                id: newWorkflowId(),\r\n                employeeId: employee.id,\r\n                type: 'Added',\r\n                details: {\r\n                    task: `New employee ${employee.employeeId} was added`,\r\n                    additionalInfo: `Added to ${department.name} department as ${employee.position}`\r\n                },\r\n                status: 'Completed',\r\n                createdDate: new Date().toISOString(),\r\n                lastModifiedDate: new Date().toISOString()\r\n            };\r\n            \r\n            employees.push(employee);\r\n            workflows.push(workflow);\r\n            \r\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\r\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\r\n            \r\n            return ok({\r\n                ...employee,\r\n                fullName: `${firstName} ${lastName}`.trim(),\r\n                departmentName: department.name,\r\n                department: {\r\n                    id: department.id,\r\n                    name: department.name,\r\n                    description: department.description\r\n                }\r\n            });\r\n        }\r\n\r\n        function updateEmployee() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n            \r\n            const employeeId = idFromUrl();\r\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\r\n            \r\n            if (employeeIndex === -1) return notFound();\r\n            \r\n            const oldEmployee = employees[employeeIndex];\r\n            const updatedEmployee = {\r\n                ...oldEmployee,\r\n                ...body,\r\n                id: employeeId,\r\n                accountId: body.accountId ? Number(body.accountId) : oldEmployee.accountId,\r\n                departmentId: body.departmentId ? Number(body.departmentId) : oldEmployee.departmentId,\r\n                position: body.position || oldEmployee.position,\r\n                salary: body.salary ? Number(body.salary) : oldEmployee.salary,\r\n                lastModifiedDate: new Date().toISOString()\r\n            };\r\n            \r\n            // Validate department exists if changed\r\n            if (body.departmentId) {\r\n                const department = departments.find(d => d.id === updatedEmployee.departmentId);\r\n                if (!department) return error('Department not found');\r\n            }\r\n\r\n            // Validate account exists if changed\r\n            if (body.accountId) {\r\n                const account = accounts.find(a => a.id === updatedEmployee.accountId);\r\n                if (!account) return error('Account not found');\r\n            }\r\n            \r\n            const department = departments.find(d => d.id === updatedEmployee.departmentId);\r\n            const account = accounts.find(a => a.id === updatedEmployee.accountId);\r\n            \r\n            // Create workflow entry for updated employee\r\n            const workflow = {\r\n                id: newWorkflowId(),\r\n                employeeId: employeeId,\r\n                type: 'Updated',\r\n                details: {\r\n                    task: `Employee ${employeeId} was updated`,\r\n                    additionalInfo: `Updated in ${department.name} department`\r\n                },\r\n                status: 'Completed',\r\n                createdDate: new Date().toISOString(),\r\n                lastModifiedDate: new Date().toISOString()\r\n            };\r\n            \r\n            employees.push(updatedEmployee);\r\n            workflows.push(workflow);\r\n            \r\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\r\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\r\n            \r\n            return ok({\r\n                ...updatedEmployee,\r\n                departmentName: department.name,\r\n                department: {\r\n                    id: department.id,\r\n                    name: department.name,\r\n                    description: department.description\r\n                },\r\n                account: basicDetails(account)\r\n            });\r\n        }\r\n\r\n        function deleteEmployee() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n\r\n            const employeeId = idFromUrl();\r\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\r\n            \r\n            if (employeeIndex === -1) return notFound();\r\n            \r\n            const employee = employees[employeeIndex];\r\n            \r\n            // Delete employee\r\n            employees = employees.filter(x => x.id !== employeeId);\r\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\r\n            \r\n            return ok({\r\n                ...employee,\r\n                status: 'Deleted'\r\n            });\r\n        }\r\n\r\n        function transferEmployee() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n\r\n            const employeeId = idFromUrl();\r\n            \r\n            // Find the employee index\r\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\r\n            if (employeeIndex === -1) {\r\n                console.error('Employee not found:', employeeId);\r\n                return notFound();\r\n            }\r\n            \r\n            // Get the current employee\r\n            const employee = employees[employeeIndex];\r\n            const oldDepartmentId = employee.departmentId;\r\n            const newDepartmentId = Number(body.departmentId);\r\n            \r\n            // Validate departments exist\r\n            const oldDepartment = departments.find(d => d.id === oldDepartmentId);\r\n            const newDepartment = departments.find(d => d.id === newDepartmentId);\r\n            if (!oldDepartment || !newDepartment) {\r\n                console.error('Department not found. Old:', oldDepartmentId, 'New:', newDepartmentId);\r\n                return error('Department not found');\r\n            }\r\n\r\n            // Don't do anything if the department hasn't changed\r\n            if (oldDepartmentId === newDepartmentId) {\r\n                console.log('Employee already in department:', newDepartmentId);\r\n                return error('Employee is already in this department');\r\n            }\r\n\r\n            console.log('Transferring employee', employee.employeeId, 'from', oldDepartment.name, 'to', newDepartment.name);\r\n\r\n            // Update the employee's department\r\n            employees[employeeIndex] = {\r\n                ...employee,\r\n                departmentId: newDepartmentId,\r\n                lastModifiedDate: new Date().toISOString()\r\n            };\r\n            \r\n            // Get employee account for name\r\n            const account = accounts.find(a => a.id === employee.accountId);\r\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\r\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\r\n            \r\n            // Create workflow entry for transfer\r\n            const workflow = {\r\n                id: newWorkflowId(),\r\n                employeeId: employeeId,\r\n                type: 'Transferred',\r\n                details: {\r\n                    task: `Employee ${employee.employeeId} was transferred`,\r\n                    additionalInfo: `From ${oldDepartment.name} to ${newDepartment.name} department`\r\n                },\r\n                status: 'Completed',\r\n                createdDate: new Date().toISOString(),\r\n                lastModifiedDate: new Date().toISOString()\r\n            };\r\n            \r\n            workflows.push(workflow);\r\n            \r\n            // Save changes\r\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\r\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\r\n\r\n            console.log('Transfer completed successfully');\r\n            \r\n            return ok({\r\n                ...employees[employeeIndex],\r\n                fullName: `${firstName} ${lastName}`.trim(),\r\n                departmentName: newDepartment.name,\r\n                department: {\r\n                    id: newDepartment.id,\r\n                    name: newDepartment.name,\r\n                    description: newDepartment.description\r\n                }\r\n            });\r\n        }\r\n\r\n        // Department functions\r\n        function getDepartments() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            \r\n            return ok(departments.map(department => {\r\n                return {\r\n                    ...department,\r\n                    id: department.id.toString(),\r\n                    name: department.name,\r\n                    description: department.description\r\n                };\r\n            }));\r\n        }\r\n\r\n        function getDepartmentById() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            \r\n            const departmentId = idFromUrl();\r\n            const department = departments.find(x => x.id === departmentId);\r\n            \r\n            if (!department) return notFound();\r\n            \r\n            return ok({\r\n                ...department,\r\n                id: department.id.toString(),\r\n                name: department.name,\r\n                description: department.description\r\n            });\r\n        }\r\n\r\n        function createDepartment() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n            \r\n            const department = body;\r\n            \r\n            // Validate department name is unique\r\n            if (departments.find(x => x.name === department.name)) {\r\n                return error('Department name already exists');\r\n            }\r\n            \r\n            // Assign department id and save\r\n            department.id = newDepartmentId();\r\n            departments.push(department);\r\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\r\n            \r\n            return ok({\r\n                ...department,\r\n                id: department.id.toString()\r\n            });\r\n        }\r\n\r\n        function updateDepartment() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n            \r\n            const departmentId = idFromUrl();\r\n            const departmentIndex = departments.findIndex(x => x.id === departmentId);\r\n            \r\n            if (departmentIndex === -1) return notFound();\r\n            \r\n            const oldDepartment = departments[departmentIndex];\r\n            const updatedDepartment = {\r\n                ...oldDepartment,\r\n                ...body,\r\n                id: departmentId,\r\n                lastModifiedDate: new Date().toISOString()\r\n            };\r\n            \r\n            // Validate department name is unique\r\n            if (departments.find(x => x.name === updatedDepartment.name && x.id !== updatedDepartment.id)) {\r\n                return error('Department name already exists');\r\n            }\r\n\r\n            departments.push(updatedDepartment);\r\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\r\n            \r\n            return ok({\r\n                ...updatedDepartment,\r\n                id: updatedDepartment.id.toString()\r\n            });\r\n        }\r\n\r\n        function deleteDepartment() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n\r\n            const departmentId = idFromUrl();\r\n            const departmentIndex = departments.findIndex(x => x.id === departmentId);\r\n            \r\n            if (departmentIndex === -1) return notFound();\r\n            \r\n            const department = departments[departmentIndex];\r\n            \r\n            // Delete department\r\n            departments = departments.filter(x => x.id !== departmentId);\r\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\r\n            \r\n            return ok({\r\n                ...department,\r\n                status: 'Deleted'\r\n            });\r\n        }\r\n\r\n        // Position functions\r\n        function getPositions() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            \r\n            return ok(positions.map(position => {\r\n                return {\r\n                    ...position,\r\n                    id: position.id.toString(),\r\n                    name: position.name,\r\n                    description: position.description\r\n                };\r\n            }));\r\n        }\r\n\r\n        function getPositionById() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            \r\n            const positionId = idFromUrl();\r\n            const position = positions.find(x => x.id === positionId);\r\n            \r\n            if (!position) return notFound();\r\n            \r\n            return ok({\r\n                ...position,\r\n                id: position.id.toString(),\r\n                name: position.name,\r\n                description: position.description\r\n            });\r\n        }\r\n\r\n        function createPosition() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n            \r\n            const position = body;\r\n            \r\n            // Validate position name is unique\r\n            if (positions.find(x => x.name === position.name)) {\r\n                return error('Position name already exists');\r\n            }\r\n            \r\n            // Assign position id and save\r\n            position.id = newPositionId();\r\n            positions.push(position);\r\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\r\n            \r\n            return ok({\r\n                ...position,\r\n                id: position.id.toString()\r\n            });\r\n        }\r\n\r\n        function updatePosition() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n            \r\n            const positionId = idFromUrl();\r\n            const positionIndex = positions.findIndex(x => x.id === positionId);\r\n            \r\n            if (positionIndex === -1) return notFound();\r\n            \r\n            const oldPosition = positions[positionIndex];\r\n            const updatedPosition = {\r\n                ...oldPosition,\r\n                ...body,\r\n                id: positionId,\r\n                lastModifiedDate: new Date().toISOString()\r\n            };\r\n            \r\n            // Validate position name is unique\r\n            if (positions.find(x => x.name === updatedPosition.name && x.id !== updatedPosition.id)) {\r\n                return error('Position name already exists');\r\n            }\r\n\r\n            positions.push(updatedPosition);\r\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\r\n            \r\n            return ok({\r\n                ...updatedPosition,\r\n                id: updatedPosition.id.toString()\r\n            });\r\n        }\r\n\r\n        function deletePosition() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n\r\n            const positionId = idFromUrl();\r\n            const positionIndex = positions.findIndex(x => x.id === positionId);\r\n            \r\n            if (positionIndex === -1) return notFound();\r\n            \r\n            const position = positions[positionIndex];\r\n            \r\n            // Delete position\r\n            positions = positions.filter(x => x.id !== positionId);\r\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\r\n            \r\n            return ok({\r\n                ...position,\r\n                status: 'Deleted'\r\n            });\r\n        }\r\n\r\n        // Request type functions\r\n        function getRequestTypes() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            \r\n            return ok(requestTypes.map(type => {\r\n                return {\r\n                    ...type,\r\n                    id: type.id.toString(),\r\n                    name: type.name,\r\n                    description: type.description\r\n                };\r\n            }));\r\n        }\r\n\r\n        function getRequestTypeById() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            \r\n            const typeId = idFromUrl();\r\n            const type = requestTypes.find(x => x.id === typeId);\r\n            \r\n            if (!type) return notFound();\r\n            \r\n            return ok({\r\n                ...type,\r\n                id: type.id.toString(),\r\n                name: type.name,\r\n                description: type.description\r\n            });\r\n        }\r\n\r\n        function createRequestType() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n            \r\n            const type = body;\r\n            \r\n            // Validate request type name is unique\r\n            if (requestTypes.find(x => x.name === type.name)) {\r\n                return error('Request type name already exists');\r\n            }\r\n            \r\n            // Assign request type id and save\r\n            type.id = newRequestTypeId();\r\n            requestTypes.push(type);\r\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\r\n            \r\n            return ok({\r\n                ...type,\r\n                id: type.id.toString()\r\n            });\r\n        }\r\n\r\n        function updateRequestType() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n            \r\n            const typeId = idFromUrl();\r\n            const typeIndex = requestTypes.findIndex(x => x.id === typeId);\r\n            \r\n            if (typeIndex === -1) return notFound();\r\n            \r\n            const oldType = requestTypes[typeIndex];\r\n            const updatedType = {\r\n                ...oldType,\r\n                ...body,\r\n                id: typeId,\r\n                lastModifiedDate: new Date().toISOString()\r\n            };\r\n            \r\n            // Validate request type name is unique\r\n            if (requestTypes.find(x => x.name === updatedType.name && x.id !== updatedType.id)) {\r\n                return error('Request type name already exists');\r\n            }\r\n\r\n            requestTypes.push(updatedType);\r\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\r\n            \r\n            return ok({\r\n                ...updatedType,\r\n                id: updatedType.id.toString()\r\n            });\r\n        }\r\n\r\n        function deleteRequestType() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n\r\n            const typeId = idFromUrl();\r\n            const typeIndex = requestTypes.findIndex(x => x.id === typeId);\r\n            \r\n            if (typeIndex === -1) return notFound();\r\n            \r\n            const type = requestTypes[typeIndex];\r\n            \r\n            // Delete request type\r\n            requestTypes = requestTypes.filter(x => x.id !== typeId);\r\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\r\n            \r\n            return ok({\r\n                ...type,\r\n                status: 'Deleted'\r\n            });\r\n        }\r\n\r\n        // Workflow functions\r\n        function getWorkflows() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            \r\n            // Sort workflows in descending order by creation date\r\n            const sortedWorkflows = [...workflows].sort((a, b) => {\r\n                const dateA = new Date(a.datetimecreated || a.createdDate);\r\n                const dateB = new Date(b.datetimecreated || b.createdDate);\r\n                return dateB.getTime() - dateA.getTime();\r\n            });\r\n\r\n            return ok(sortedWorkflows.map(workflow => {\r\n                const details = typeof workflow.details === 'object' ? \r\n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\r\n                    workflow.details || '';\r\n\r\n                return {\r\n                    id: workflow.id.toString(),\r\n                    type: workflow.type,\r\n                    details: details,\r\n                    status: workflow.status,\r\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\r\n                };\r\n            }));\r\n        }\r\n\r\n        function getWorkflowById() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            const workflow = workflows.find(x => x.id === idFromUrl());\r\n            if (!workflow) return notFound();\r\n            \r\n            const details = typeof workflow.details === 'object' ? \r\n                `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\r\n                workflow.details || '';\r\n\r\n            return ok({\r\n                id: workflow.id.toString(),\r\n                type: workflow.type,\r\n                details: details,\r\n                status: workflow.status,\r\n                datetimecreated: workflow.datetimecreated || workflow.createdDate\r\n            });\r\n        }\r\n\r\n        function getWorkflowsByRequestId() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            \r\n            const requestId = idFromUrl();\r\n            console.log('Looking for workflows with requestId:', requestId);\r\n\r\n            const request = requests.find(x => x.id === requestId);\r\n            if (!request) {\r\n                console.log('Request not found with id:', requestId);\r\n                return notFound();\r\n            }\r\n            \r\n            const requestWorkflows = workflows.filter(x => x.requestId === requestId);\r\n            console.log('Found workflows:', requestWorkflows.length);\r\n\r\n            // Sort workflows in descending order\r\n            const sortedWorkflows = [...requestWorkflows].sort((a, b) => {\r\n                const dateA = new Date(a.datetimecreated || a.createdDate);\r\n                const dateB = new Date(b.datetimecreated || b.createdDate);\r\n                return dateB.getTime() - dateA.getTime();\r\n            });\r\n\r\n            return ok(sortedWorkflows.map(workflow => {\r\n                const details = typeof workflow.details === 'object' ? \r\n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\r\n                    workflow.details || '';\r\n\r\n                return {\r\n                    id: workflow.id.toString(),\r\n                    type: workflow.type,\r\n                    details: details,\r\n                    status: workflow.status,\r\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\r\n                };\r\n            }));\r\n        }\r\n\r\n        function createWorkflow() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n            \r\n            console.log('Received workflow data:', body);\r\n\r\n            const workflow = {\r\n                id: newWorkflowId(),\r\n                employeeId: body.employeeId,\r\n                type: body.type,\r\n                details: body.details,\r\n                status: body.status,\r\n                createdDate: new Date().toISOString(),\r\n                lastModifiedDate: new Date().toISOString()\r\n            };\r\n            \r\n            // Validate required fields\r\n            const requiredFields = {\r\n                employeeId: !!workflow.employeeId,\r\n                type: !!workflow.type,\r\n                details: !!workflow.details,\r\n                status: !!workflow.status\r\n            };\r\n            \r\n            console.log('Field validation results:', requiredFields);\r\n            \r\n            // Check if any required field is missing\r\n            const missingFields = Object.entries(requiredFields)\r\n                .filter(([_, isValid]) => !isValid)\r\n                .map(([fieldName]) => fieldName);\r\n            \r\n            if (missingFields.length > 0) {\r\n                return error(`Required fields are missing: ${missingFields.join(', ')}`);\r\n            }\r\n\r\n            // Validate employee exists\r\n            const employee = employees.find(e => e.id === workflow.employeeId);\r\n            if (!employee) return error('Employee not found');\r\n            \r\n            employees.push(workflow);\r\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\r\n            \r\n            return ok({\r\n                ...workflow,\r\n                employee: employee ? {\r\n                    ...employee,\r\n                    employeeId: employee.employeeId\r\n                } : null\r\n            });\r\n        }\r\n\r\n        function updateWorkflow() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n            \r\n            const workflowId = idFromUrl();\r\n            const workflowIndex = workflows.findIndex(x => x.id === workflowId);\r\n            \r\n            if (workflowIndex === -1) return notFound();\r\n            \r\n            const oldWorkflow = workflows[workflowIndex];\r\n            const updatedWorkflow = {\r\n                ...oldWorkflow,\r\n                ...body,\r\n                id: workflowId,\r\n                lastModifiedDate: new Date().toISOString()\r\n            };\r\n            \r\n            // Validate employee exists\r\n            const employee = employees.find(e => e.id === updatedWorkflow.employeeId);\r\n            if (!employee) return error('Employee not found');\r\n            \r\n            employees.push(updatedWorkflow);\r\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\r\n            \r\n            return ok({\r\n                ...updatedWorkflow,\r\n                employee: employee ? {\r\n                    ...employee,\r\n                    employeeId: employee.employeeId\r\n                } : null\r\n            });\r\n        }\r\n\r\n        function updateWorkflowStatus() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n\r\n            const workflowId = idFromUrl();\r\n            const workflow = workflows.find(x => x.id === workflowId);\r\n            \r\n            if (!workflow) return notFound();\r\n            \r\n            const newStatus = body.status;\r\n\r\n            Object.assign(workflow, {\r\n                status: newStatus,\r\n                lastModifiedDate: new Date().toISOString()\r\n            });\r\n\r\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\r\n\r\n            return ok({\r\n                ...workflow,\r\n                status: newStatus\r\n            });\r\n        }\r\n\r\n        function deleteWorkflow() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n\r\n            const workflowId = idFromUrl();\r\n            const workflowIndex = workflows.findIndex(x => x.id === workflowId);\r\n            \r\n            if (workflowIndex === -1) return notFound();\r\n            \r\n            const workflow = workflows[workflowIndex];\r\n            const employee = employees.find(e => e.id === workflow.employeeId);\r\n            \r\n            // Delete workflow\r\n            workflows = workflows.filter(x => x.id !== workflowId);\r\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\r\n            \r\n            return ok({\r\n                ...workflow,\r\n                employee: employee ? {\r\n                    ...employee,\r\n                    employeeId: employee.employeeId\r\n                } : null\r\n            });\r\n        }\r\n\r\n        function deleteWorkflowItem() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n\r\n            const workflowId = idFromUrl();\r\n            const workflow = workflows.find(x => x.id === workflowId);\r\n            \r\n            if (!workflow) return notFound();\r\n            \r\n            // Delete workflow item\r\n            workflows = workflows.filter(x => x.id !== workflowId);\r\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\r\n            \r\n            return ok({\r\n                ...workflow,\r\n                status: 'Deleted'\r\n            });\r\n        }\r\n\r\n        function createAccount() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n            \r\n            const account = body;\r\n            \r\n            if (accounts.find(x => x.email === account.email)) {\r\n                return error('Email already exists');\r\n            }\r\n            \r\n            account.id = newAccountId();\r\n            account.dateCreated = new Date().toISOString();\r\n            account.isVerified = true;\r\n            account.refreshTokens = [];\r\n            \r\n            accounts.push(account);\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n            \r\n            return ok(basicDetails(account));\r\n        }\r\n\r\n        function updateAccount() {\r\n            if (!isAuthenticated()) return unauthorized();\r\n            \r\n            const accountId = idFromUrl();\r\n            const account = accounts.find(x => x.id === accountId);\r\n            \r\n            if (!account) return notFound();\r\n            if (account.id !== currentAccount().id && !isAdmin()) return unauthorized();\r\n            \r\n            // Only allow admins to update role\r\n            if (!isAdmin()) {\r\n                delete body.role;\r\n            }\r\n            \r\n            // If email is being changed, make sure it's not already taken\r\n            if (body.email && body.email !== account.email && accounts.find(x => x.email === body.email)) {\r\n                return error('Email already exists');\r\n            }\r\n            \r\n            Object.assign(account, body);\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n            \r\n            return ok(basicDetails(account));\r\n        }\r\n\r\n        function deleteAccount() {\r\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\r\n            \r\n            const accountId = idFromUrl();\r\n            const account = accounts.find(x => x.id === accountId);\r\n            \r\n            if (!account) return notFound();\r\n            if (account.id === currentAccount().id) return error('You cannot delete your own account');\r\n            \r\n            accounts = accounts.filter(x => x.id !== accountId);\r\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\r\n            \r\n            return ok();\r\n        }\r\n    }\r\n}\r\n\r\nexport const fakeBackendProvider = {\r\n    // use fake backend in place of Http service for backend-less development\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: FakeBackendInterceptor,\r\n    multi: true\r\n};"]},"metadata":{},"sourceType":"module","externalDependencies":[]}