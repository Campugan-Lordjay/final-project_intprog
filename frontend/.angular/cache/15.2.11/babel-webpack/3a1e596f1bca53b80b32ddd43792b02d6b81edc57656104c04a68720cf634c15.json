{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { catchError, filter, take, switchMap } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\nexport let JwtInterceptor = /*#__PURE__*/(() => {\n  class JwtInterceptor {\n    constructor(accountService) {\n      this.accountService = accountService;\n      this.isRefreshing = false;\n      this.refreshTokenSubject = new BehaviorSubject(null);\n    }\n    intercept(request, next) {\n      // add auth header with jwt if account is logged in and request is to the api url\n      const account = this.accountService.accountValue;\n      const isLoggedIn = account === null || account === void 0 ? void 0 : account.jwtToken;\n      const isApiUrl = request.url.startsWith(environment.apiUrl);\n      if (isLoggedIn && isApiUrl && !this.isRefreshTokenRequest(request)) {\n        request = this.addTokenHeader(request, account.jwtToken);\n      }\n      return next.handle(request).pipe(catchError(error => {\n        if (error instanceof HttpErrorResponse && error.status === 401) {\n          // Try to refresh token only if we're not already refreshing\n          // and this is not a refresh token request\n          if (!this.isRefreshing && !this.isRefreshTokenRequest(request)) {\n            return this.handle401Error(request, next);\n          } else if (this.isRefreshTokenRequest(request)) {\n            // If refresh token request fails, logout and redirect\n            this.accountService.logout();\n            return throwError(() => error);\n          }\n        } else if (error instanceof HttpErrorResponse && error.status === 403) {\n          // handle 403 forbidden errors\n          this.accountService.logout();\n          return throwError(() => new Error('Access forbidden. Please login again.'));\n        }\n        return throwError(() => error);\n      }));\n    }\n    isRefreshTokenRequest(request) {\n      return request.url.includes('/refresh-token') || request.url.includes('/revoke-token');\n    }\n    addTokenHeader(request, token) {\n      return request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`,\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache'\n        }\n      });\n    }\n    handle401Error(request, next) {\n      if (!this.isRefreshing) {\n        this.isRefreshing = true;\n        this.refreshTokenSubject.next(null);\n        return this.accountService.refreshToken().pipe(switchMap(account => {\n          this.isRefreshing = false;\n          this.refreshTokenSubject.next(account.jwtToken);\n          return next.handle(this.addTokenHeader(request, account.jwtToken));\n        }), catchError(error => {\n          this.isRefreshing = false;\n          this.accountService.logout();\n          return throwError(() => error);\n        }));\n      }\n      return this.refreshTokenSubject.pipe(filter(token => token !== null), take(1), switchMap(token => next.handle(this.addTokenHeader(request, token))));\n    }\n  }\n  JwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) {\n    return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AccountService));\n  };\n  JwtInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtInterceptor,\n    factory: JwtInterceptor.ɵfac\n  });\n  return JwtInterceptor;\n})();","map":{"version":3,"mappings":"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","names":["HttpErrorResponse","throwError","BehaviorSubject","catchError","filter","take","switchMap","environment","JwtInterceptor","constructor","accountService","intercept","request","next","account","accountValue","isLoggedIn","jwtToken","isApiUrl","url","startsWith","apiUrl","isRefreshTokenRequest","addTokenHeader","handle","pipe","error","status","isRefreshing","handle401Error","logout","Error","includes","token","clone","setHeaders","Authorization","refreshTokenSubject","refreshToken","factory"],"sourceRoot":"","sources":["C:\\Users\\marlo\\OneDrive\\Desktop\\New folder (2)\\final-intprog-project\\frontend\\src\\app\\_helpers\\jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError, BehaviorSubject } from 'rxjs';\r\nimport { catchError, filter, take, switchMap, finalize } from 'rxjs/operators';\r\n\r\nimport { environment } from '@environments/environment';\r\nimport { AccountService } from '@app/_services';\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n    private isRefreshing = false;\r\n    private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n\r\n    constructor(private accountService: AccountService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        // add auth header with jwt if account is logged in and request is to the api url\r\n        const account = this.accountService.accountValue;\r\n        const isLoggedIn = account?.jwtToken;\r\n        const isApiUrl = request.url.startsWith(environment.apiUrl);\r\n        \r\n        if (isLoggedIn && isApiUrl && !this.isRefreshTokenRequest(request)) {\r\n            request = this.addTokenHeader(request, account.jwtToken);\r\n        }\r\n\r\n        return next.handle(request).pipe(\r\n            catchError(error => {\r\n                if (error instanceof HttpErrorResponse && error.status === 401) {\r\n                    // Try to refresh token only if we're not already refreshing\r\n                    // and this is not a refresh token request\r\n                    if (!this.isRefreshing && !this.isRefreshTokenRequest(request)) {\r\n                        return this.handle401Error(request, next);\r\n                    } else if (this.isRefreshTokenRequest(request)) {\r\n                        // If refresh token request fails, logout and redirect\r\n                        this.accountService.logout();\r\n                        return throwError(() => error);\r\n                    }\r\n                } else if (error instanceof HttpErrorResponse && error.status === 403) {\r\n                    // handle 403 forbidden errors\r\n                    this.accountService.logout();\r\n                    return throwError(() => new Error('Access forbidden. Please login again.'));\r\n                }\r\n                return throwError(() => error);\r\n            })\r\n        );\r\n    }\r\n\r\n    private isRefreshTokenRequest(request: HttpRequest<any>): boolean {\r\n        return request.url.includes('/refresh-token') || request.url.includes('/revoke-token');\r\n    }\r\n\r\n    private addTokenHeader(request: HttpRequest<any>, token: string) {\r\n        return request.clone({\r\n            setHeaders: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Cache-Control': 'no-cache',\r\n                'Pragma': 'no-cache'\r\n            }\r\n        });\r\n    }\r\n\r\n    private handle401Error(request: HttpRequest<any>, next: HttpHandler) {\r\n        if (!this.isRefreshing) {\r\n            this.isRefreshing = true;\r\n            this.refreshTokenSubject.next(null);\r\n\r\n            return this.accountService.refreshToken().pipe(\r\n                switchMap((account: any) => {\r\n                    this.isRefreshing = false;\r\n                    this.refreshTokenSubject.next(account.jwtToken);\r\n                    return next.handle(this.addTokenHeader(request, account.jwtToken));\r\n                }),\r\n                catchError(error => {\r\n                    this.isRefreshing = false;\r\n                    this.accountService.logout();\r\n                    return throwError(() => error);\r\n                })\r\n            );\r\n        }\r\n\r\n        return this.refreshTokenSubject.pipe(\r\n            filter(token => token !== null),\r\n            take(1),\r\n            switchMap(token => next.handle(this.addTokenHeader(request, token)))\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}